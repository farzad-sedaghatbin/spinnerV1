!function (e) {
  function __webpack_require__(n) {
    if (t[n])return t[n].exports;
    var i = t[n] = {i: n, l: !1, exports: {}};
    return e[n].call(i.exports, i, i.exports, __webpack_require__), i.l = !0, i.exports
  }

  var t = {};
  __webpack_require__.m = e, __webpack_require__.c = t, __webpack_require__.i = function (e) {
    return e
  }, __webpack_require__.d = function (e, t, n) {
    __webpack_require__.o(e, t) || Object.defineProperty(e, t, {configurable: !1, enumerable: !0, get: n})
  }, __webpack_require__.n = function (e) {
    var t = e && e.__esModule ? function () {
      return e.default
    } : function () {
      return e
    };
    return __webpack_require__.d(t, "a", t), t
  }, __webpack_require__.o = function (e, t) {
    return Object.prototype.hasOwnProperty.call(e, t)
  }, __webpack_require__.p = "", __webpack_require__(__webpack_require__.s = 5)
}([function (e, t, n) {
  "use strict";
  function _interopRequireWildcard(e) {
    if (e && e.__esModule)return e;
    var t = {};
    if (null != e)for (var n in e)Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);
    return t.default = e, t
  }

  function Game(e, t, n) {
    console.log("game started"), this._initSavedData(n), this._initUpgradeCosts(), this._initUpgradeAvailability(), this._initBuyUpgradeCallback(), s.prepareScreen(this.getLevelMultiplier(), this.coins), gamee.updateScore(this.highestScore), s.spinsCounterUI.setSpinsCount(0, 0), s.hintHand.setSpinsRemain(u), this._registerSlideEvent(), this._initSound(e), this._start()
  }

  function Lobby(e, t, n, i, s) {
    this.speedGain = (e + 8) * c, this.inertia = (t + 1) * l, this.nextLevel = Math.pow(2, n) * p, this.level = n, this.spinAttempts = u, this.bestSpins = i, this.speed = 0, this.spins = 0, this.endCb = s, this._registerUpdate(), this._startSound()
  }

  Object.defineProperty(t, "__esModule", {value: !0}), t.timeLoop = t.SPIN_ATTEMPTS = void 0, t.Game = Game;
  var i = n(1), s = _interopRequireWildcard(i), a = n(4), r = n(3), d = n(6), o = _interopRequireWildcard(d), c = 1750, l = 3, p = 25, u = t.SPIN_ATTEMPTS = 5, h = t.timeLoop = new a.Chronos;
  Game.prototype = {
    _initSavedData: function (e) {
      this.speedUpgrades = e.speedUpgrades || 0, this.inertiaUpgrades = e.inertiaUpgrades || 0, this.timeRewardUpgrades = e.timeRewardUpgrades || 0, this.level = e.level || 0, this.coins = e.coins || 0, this.bestSpins = e.bestSpins || 0, this.highestScore = e.highestScore || 0, this.gameTries = 0
    }, _initUpgradeCosts: function () {
      s.upgradeUI.updateCost(this.getUpgradeCost("speedUpgrades"), this.getUpgradeCost("inertiaUpgrades"), this.getUpgradeCost("timeRewardUpgrades")), s.upgradeUI.updateLevel(this.speedUpgrades, this.inertiaUpgrades, this.timeRewardUpgrades)
    }, _initUpgradeAvailability: function () {
      s.upgradeUI.updateAvailability(!(this.getUpgradeCost("speedUpgrades") > this.coins), !(this.getUpgradeCost("inertiaUpgrades") > this.coins), !(this.getUpgradeCost("timeRewardUpgrades") > this.coins))
    }, _initBuyUpgradeCallback: function () {
      var e = function (e) {
        var t = this.getUpgradeCost(e);
        t > this.coins || (this[e] += 1, this.addCoins(-t), this._initUpgradeCosts(), this._initUpgradeAvailability(), this.saveState())
      };
      s.upgradeUI.bindUpgradeCallbacks(e.bind(this, "speedUpgrades"), e.bind(this, "inertiaUpgrades"), e.bind(this, "timeRewardUpgrades"))
    }, _initSound: function (e) {
      r.audio.mute(!e)
    }, getLevelMultiplier: function () {
      return Math.pow(2, this.level)
    }, getUpgradeCost: function (e) {
      return Math.floor(25 * Math.pow(1.4, this[e]))
    }, _registerSlideEvent: function () {
      s.slideAreaUI.registerSlide(function (e, t) {
        this.lobby || this.createLobby(), this.lobby.spinAttempt(e, t)
      }.bind(this))
    }, createLobby: function () {
      this.lobby = new Lobby(this.speedUpgrades, this.inertiaUpgrades, this.level, this.bestSpins, this.endLobby.bind(this)), this.gameTries += 1
    }, forceEnd: function () {
      s.resetAll(), this.gameTries = 0, this.setScore()
    }, saveState: function () {
      gamee.gameSave({
        speedUpgrades: this.speedUpgrades,
        inertiaUpgrades: this.inertiaUpgrades,
        timeRewardUpgrades: this.timeRewardUpgrades,
        level: this.level,
        coins: this.coins,
        bestSpins: this.bestSpins,
        highestScore: this.highestScore
      })
    }, pause: function () {
      r.audio.pause(!0), h.setUpdating(!1)
    }, resume: function () {
      r.audio.pause(!1), h.setUpdating(!0)
    }, setSound: function (e) {
      r.audio.mute(!e)
    }, setScore: function () {
      var e = Math.pow(this.highestScore, .7);
      e = Math.floor(e), e = parseInt(e), gamee.updateScore(e)
    }, endLobby: function (e, t, n) {
      this.lobby = null, this.addCoins(e), this.highestScore += e, this.bestSpins = t, n && (this.level += 1, s.spinsCounterUI.setLevelMultiplier(this.getLevelMultiplier())), this.setScore(), this.saveState(), this.gameTries > 4 && gamee.gameOver(), this._initUpgradeAvailability(), s.spinsCounterUI.setSpinsCount(0, 0), s.hintHand.setSpinsRemain(u), console.log("lobby ends")
    }, addCoins: function (e) {
      this.coins += e, s.coinsUI.setCoins(this.coins)
    }, _start: function (e) {
      var t = performance.now(), n = function step() {
        var e = performance.now(), n = e - t;
        t = e, h.update(n), window.requestAnimationFrame(step)
      };
      window.requestAnimationFrame(n)
    }
  }, Lobby.prototype = {
    _startSound: function () {
      r.audio.start()
    }, _registerUpdate: function () {
      h.registerListener(this)
    }, spinAttempt: function (e, t) {
      var n = t / e * this.speedGain;
      this.spinAttempts < 1 || (this.spinAttempts--, s.hintHand.setSpinsRemain(this.spinAttempts), this.speed += n, this.speed = Math.max(0, this.speed), this.speed = Math.min(this.speed, .025 * this.speedGain))
    }, end: function () {
      var e = this;
      r.audio.stop(), h.removeListener(this), this.spins = Math.floor(this.spins), this.bestSpins = Math.max(this.bestSpins, this.spins);
      var t = Math.pow(2, this.level), n = !1, i = this.spins * t;
      this.spins >= this.nextLevel && (n = !0), s.endScreen.runEndScreen(this.spins, this.bestSpins, t, i, function () {
        return e.endCb(i, e.bestSpins, n)
      })
    }, update: function (e) {
      e *= .001, this._updateSpeed(e), this._updateSpins(e), this._updateSound(), this._updateUI(), this._resolveGameEnd()
    }, _updateSpeed: function (e) {
      this.speed -= 20 * e, (Math.abs(this.speed) < 5 || this.speed < 0) && (this.speed = 0)
    }, _updateSpins: function (e) {
      this.spins += e * Math.abs(this.speed) / 60
    }, _updateUI: function () {
      s.speedMeterUI.setSpeed(this.speed);
      var e = this.spins > 0 ? this.spins / this.nextLevel * 100 : 0;
      s.spinsCounterUI.setSpinsCount(this.spins, e), e > 100 && s.spinsCounterUI.setLevelMultiplier(Math.pow(2, this.level + 1));
      var t = 360 * -(this.spins - Math.floor(this.spins)) * Math.sign(this.speed);
      o.render(t, this.speed)
    }, _resolveGameEnd: function () {
      0 === this.speed && this.end()
    }, _updateSound: function () {
      r.audio.setRate(this.speed)
    }
  }
}, function (e, t, n) {
  "use strict";
  function swipe(e, t) {
    function handleTouchStart(e) {
      this.xDown = e.touches[0].clientX, this.startTime = performance.now()
    }

    function handleMouseStart(e) {
      this.xDown = e.clientX, this.startTime = performance.now()
    }

    function handleTouchMove(e) {
      this.xLast = e.touches[0].clientX
    }

    function handleTouchEnd(e) {
      null !== i.xDown && resolveSlide.call(this, this.xLast)
    }

    function handleMouseEnd(e) {
      null !== i.xDown && resolveSlide.call(this, e.clientX)
    }

    function resolveSlide(e) {
      var i = performance.now();
      (e - this.xDown) / n / (i - this.startTime) > .001 && t(i - this.startTime, (e - this.xDown) / n), this.xDown = null, this.startTime = null
    }

    var n = e.clientWidth, i = {xDown: null, startTime: null, xLast: null};
    e.addEventListener("touchstart", handleTouchStart.bind(i), !1), e.addEventListener("mousedown", handleMouseStart.bind(i), !1), e.addEventListener("touchend", handleTouchEnd.bind(i), !1), e.addEventListener("touchout", handleTouchEnd.bind(i), !1), e.addEventListener("touchmove", handleTouchMove.bind(i), !1), e.addEventListener("mouseup", handleMouseEnd.bind(i), !1), e.addEventListener("mouseout", handleMouseEnd.bind(i), !1)
  }

  function renderTriNumber(e) {
    e = Math.floor(e);
    var t, n = ["", "k", "M", "B", "T"];
    for (t = 0; t < n.length && !(.001 * e < 1); t++)e *= .001;
    return (e = parseInt(Math.floor(10 * e)) / 10) + n[t]
  }

  Object.defineProperty(t, "__esModule", {value: !0}), t.hintHand = t.coinsUI = t.slideAreaUI = t.upgradeUI = t.speedMeterUI = t.spinsCounterUI = t.endScreen = t.prepareScreen = t.resetAll = void 0;
  var i = n(0), s = document.getElementById("game-wrapper"), a = document.getElementById("overlay-wrapper"), r = document.getElementById("game-overlay"), d = (t.resetAll = function () {
  }, t.prepareScreen = function (e, t) {
    o.setCoins(t), d.setLevelMultiplier(e);
    for (var n = window.innerHeight / 1136, i = .5 * (window.innerWidth - 640 * n), r = [a, s], c = 0; c < r.length; c++)r[c].style.WebkitTransform = "scale(" + n + ")", r[c].style.msTransform = "scale(" + n + ")", r[c].style.transform = "scale(" + n + ")", r[c].style.transformOrigin = "left top", r[c].style.marginLeft = i + "px";
    s.style.display = "block"
  }, t.endScreen = function () {
    var e = document.createElement("div");
    e.className = "end-screen ui-text";
    var t = document.createElement("span");
    t.className = "font-180 font-white line-160";
    var n = document.createElement("span"), i = document.createElement("p");
    i.className = "font-white", i.innerText = "SPINS:", i.appendChild(document.createElement("br")), i.appendChild(t), i.appendChild(document.createElement("br"));
    var s = document.createElement("span");
    s.className = "font-purple", s.appendChild(document.createTextNode("BEST: ")), s.appendChild(n), i.appendChild(s), e.appendChild(i);
    var d = document.createElement("div");
    d.className = "hr-yellow", e.appendChild(d);
    var o = document.createElement("span");
    o.className = "font-80 font-white spins-minor";
    var c = document.createElement("span");
    c.className = "font-white level-multiplier";
    var l = document.createElement("span");
    l.className = "font-70 coin-text";
    var p = document.createElement("button");
    p.className = "button-collect button-large";
    var u = document.createElement("p");
    u.className = "font-white", u.innerText = "REWARD:", u.appendChild(document.createElement("br")), e.appendChild(u), u = document.createElement("div"), u.className = "font-white", u.appendChild(o), u.appendChild(c), e.appendChild(u), u = document.createElement("div"), u.className = "font-white", u.className = "button-collect-wrapper";
    var h = document.createElement("span");
    return h.className = "coin-icon", u.appendChild(h), u.appendChild(l), u.appendChild(p), e.appendChild(u), {
      runEndScreen: function (i, s, d, u, h) {
        a.innerHTML = "", a.appendChild(e), a.style.display = "block", r.style.display = "block", e.style.display = "block", t.innerText = Math.floor(i), n.innerText = Math.floor(s), o.innerText = Math.floor(i), c.innerText = "x" + Math.floor(d), l.innerText = renderTriNumber(u);
        var m = p.cloneNode(!0);
        p.parentNode.replaceChild(m, p), p = m, p.addEventListener("click", function () {
          a.style.display = "none", r.style.display = "none", e.style.display = "none", h()
        }, !1)
      }
    }
  }(), t.spinsCounterUI = function () {
    var e = document.createElement("div");
    e.className = "spins-counter ui-text";
    var t = document.createElement("div");
    t.className = "spins-count";
    var n = document.createElement("div");
    n.className = "spins-counter-overlay";
    var i = document.createElement("div");
    i.className = "fill-bar";
    var a = document.createElement("div");
    a.className = "fill-bar-progress";
    var r = document.createElement("span");
    r.className = "level-mult";
    var d = document.createElement("span");
    d.innerText = "SPINS:", d.className = "spins-actual-desc";
    var o = document.createElement("span");
    return o.className = "spins-actual", t.appendChild(d), t.appendChild(document.createElement("br")), t.appendChild(o), i.appendChild(a), e.appendChild(i), e.appendChild(t), e.appendChild(r), e.appendChild(n), s.appendChild(e), {
      setSpinsCount: function (e, t) {
        o.innerText = Math.floor(e), a.style.width = t + "%"
      }, setLevelMultiplier: function (e) {
        r.innerText = "x" + e
      }
    }
  }()), o = (t.speedMeterUI = function () {
    var e = document.createElement("div");
    e.className = "speed-meter ui-text";
    var t = document.createElement("span");
    t.innerText = "0", t.className = "font-36";
    var n = document.createElement("img");
    return n.className = "speed-ico", n.src = "assets/ui/rev_icon.png", e.appendChild(t), e.appendChild(n), s.appendChild(e), {
      setSpeed: function (e) {
        t.innerText = Math.round(e)
      }
    }
  }(), t.upgradeUI = function () {
    var e = document.createElement("div");
    e.className = "upgrade-screen ui-text";
    var t = document.createElement("div");
    t.className = "close-button", t.addEventListener("click", function () {
      a.style.display = "none", r.style.display = "none", e.style.display = "none";
      var t = o.getWrapper();
      s.appendChild(t)
    }), e.appendChild(t);
    var n = document.createElement("p");
    n.className = "font-70 upgrade-header", n.innerText = "UPGRADES", e.appendChild(n);
    for (var i = ["more speed", "longer spins", "time reward"], d = ["rev_icon.png", "spins_icon.png", "time_icon.png"], c = [], l = [], p = [], u = 0; u < i.length; u++) {
      var h = document.createElement("span");
      h.className = "font-40 upgrade-text", h.innerText = i[u];
      var m = document.createElement("img");
      m.src = "assets/ui/" + d[u];
      var v = document.createElement("span");
      v.className = "upgrade-level-wrapper font-60";
      var g = document.createElement("span");
      g.className = "upgrade-level", l.push(g), v.appendChild(document.createTextNode(" ")), v.appendChild(g);
      var f = document.createElement("button");
      f.className = "button-upgrade button-large";
      document.createElement("span").className = "coin-icon";
      var _ = document.createTextNode("");
      f.appendChild(_), c.push(_), p.push(f);
      var b = document.createElement("div");
      b.className = "font-white", b.className = "button-upgrade-wrapper", b.appendChild(h), b.appendChild(document.createElement("br")), b.appendChild(m), b.appendChild(v), b.appendChild(f), e.appendChild(b)
    }
    return  {
      updateCost: function (e, t, n) {
        c[0].textContent = renderTriNumber(e), c[1].textContent = renderTriNumber(t), c[2].textContent = renderTriNumber(n)
      }, updateAvailability: function (e, t, n) {
        p[0].disabled = !1 === e, p[1].disabled = !1 === t, p[2].disabled = !1 === n
      }, bindUpgradeCallbacks: function (e, t, n) {
        p[0].addEventListener("click", e), p[1].addEventListener("click", t), p[2].addEventListener("click", n)
      }, updateLevel: function (e, t, n) {
        l[0].textContent = e, l[1].textContent = t, l[2].textContent = n
      }
    }
  }(), t.slideAreaUI = function () {
    var e = document.createElement("div");
    return e.className = "slide-area", document.body.appendChild(e), {
      registerSlide: function (t) {
        swipe(e, t)
      }, slideAreaEl: e
    }
  }(), t.coinsUI = function () {
    var e = document.createElement("div");
    e.className = "coins-total ui-text";
    return  s.appendChild(e), {
      setCoins: function (e) {
        t.innerText = renderTriNumber(e)
      }, getWrapper: function () {
        return e
      }
    }
  }());
  t.hintHand = function () {
    var e = document.createElement("div");
    e.className = "hint-hand-wrapper";
    var t = document.createElement("span");
    t.className = "hint-hand-ico";
    var n = document.createElement("span");
    return n.className = "hint-spins-remain ui-text", e.appendChild(t), e.appendChild(n), s.appendChild(e), {
      setSpinsRemain: function (e) {
        var t = "/" + i.SPIN_ATTEMPTS;
        n.innerText = e + t
      }
    }
  }()
}, function (e, t, n) {
  "use strict";
  Object.defineProperty(t, "__esModule", {value: !0});
  var i = function (e) {
    this.sound = !1, this.controller = null, this.gameInstance = null, this.Game = e, this._initGame()
  };
  i.prototype = {
    _initGame: function () {
      var e = {}, t = ["saveState"];
      gamee.emitter.addEventListener("mute", function (e) {
        try {
          this.gameInstance.setSound(!1)
        } catch (e) {
          this.sound = !1
        }
      }.bind(this)), gamee.emitter.addEventListener("unmute", function (e) {
        try {
          this.gameInstance.setSound(!0)
        } catch (e) {
          this.sound = !0
        }
      }.bind(this)), gamee.emitter.addEventListener("pause", function (e) {
        try {
          this.gameInstance.pause()
        } catch (e) {
        }
      }.bind(this)), gamee.emitter.addEventListener("resume", function (e) {
        try {
          this.gameInstance.resume()
        } catch (e) {
        }
      }.bind(this)), gamee.gameInit("FullScreen", e, t, this._initGameCb.bind(this))
    }, _initGameCb: function (e) {
      if (this.controller = e.controller, this.sound = e.sound, this.saveState = {}, null !== e.saveState)try {
        var t = JSON.parse(e.saveState);
        null !== t && (this.saveState = t)
      } catch (e) {
      }
      this._gameReady()
    }, _gameReady: function () {
      gamee.emitter.addEventListener("start", this.gameStart.bind(this)), gamee.gameReady()
    }, _gameReadyCb: function () {
    }, gameStart: function (e) {
      null !== this.gameInstance ? this.gameInstance.forceEnd() : this.gameInstance = new this.Game(this.sound, this.controller, this.saveState), e.detail.callback()
    }
  };
  t.createGameeConnector = function (e) {
    new i(e)
  }
}, function (e, t, n) {
  "use strict";
  Object.defineProperty(t, "__esModule", {value: !0}), t.audio = void 0;
  var i = n(1), s = function () {
    this.isPlaying = !1, this._init()
  };
  s.prototype = {
    _init: function () {
      this.sound = new Howl({
        src: ["assets/audio/63532__florian-reinke__click2.mp3"],
        loop: !0,
        preload: !0,
        volume: 1,
        rate: 1,
        autoplay: !1
      })
    }, start: function (e) {
      e = e || 0, this.setRate(e);
      try {
        this.sound.stop()
      } catch (e) {
      }
      this.sound.play(), this.isPlaying = !0
    }, mute: function (e) {
      this.sound.mute(e)
    }, pause: function (e) {
      e ? this.sound.pause() : this.isPlaying && this.sound.play()
    }, stop: function () {
      this.sound.stop(), this.isPlaying = !1
    }, setRate: function (e) {
      e *= .05, e *= this.sound.duration(), e = Math.min(7.1, e), e = Math.max(.1, e), this.sound.rate(e)
    }
  };
  t.audio = new s;
  !function () {
    var e;
    e = function () {
      var t = new AudioContext, n = t.createBuffer(1, 1, 22050), s = t.createBufferSource();
      s.buffer = n, s.connect(t.destination), s.start || (s.start = s.noteOn), s.start(0);
      try {
        window.removeEventListener("touchstart", e), document.body.removeEventListener("touchstart", e), i.slideAreaUI.slideAreaEl.removeEventListener("touchstart", e)
      } catch (e) {
      }
    }, window.addEventListener("touchstart", e, !0), document.body.addEventListener("touchstart", e, !0), i.slideAreaUI.slideAreaEl.addEventListener("touchstart", e, !0)
  }(), function () {
    var e = null, t = !0;
    try {
      "undefined" != typeof AudioContext ? e = new AudioContext : "undefined" != typeof webkitAudioContext ? e = new webkitAudioContext : t = !1
    } catch (e) {
      t = !1
    }
    if (t && "suspended" === e.state) {
      var n = function resume() {
        e.resume(), setTimeout(function () {
          "running" === e.state && document.body.removeEventListener("touchend", resume, !1)
        }, 0)
      };
      document.body.addEventListener("touchend", n, !1)
    }
  }()
}, function (e, t, n) {
  "use strict";
  Object.defineProperty(t, "__esModule", {value: !0});
  var i = t.Chronos = function () {
    this.listeners = [], this._init()
  };
  i.prototype = {
    _init: function () {
      this.timeRunning = 0, this.timeMod = 1
    }, registerListener: function (e) {
      this.listeners.push(e)
    }, prependListener: function (e) {
      this.listeners.unshift(e)
    }, removeListener: function (e) {
      var t;
      for (t = 0; t < this.listeners.length; t++)e !== this.listeners[t] || this.listeners.splice(t)
    }, update: function (e) {
      var t;
      for (e *= this.timeMod, this.timeRunning += e, t = 0; t < this.listeners.length; t++)this.listeners[t].update(e)
    }, setUpdating: function (e) {
      e ? delete this.update : this.update = function () {
      }
    }
  };
  t.createChronos = function () {
    return new i
  }
}, function (e, t, n) {
  "use strict";
  var i = n(2), s = n(0);
  (0, i.createGameeConnector)(s.Game)
}, function (e, t, n) {
  "use strict";
  function loadImages() {
    var e = 0, t = 0;
    s = {};
    for (var n in p)t++, loadImage(p[n], n, function () {
      ++e === t && (a = s.stage0, r = i.width / a.width, d = i.height / a.height, o = Math.min(r, d), c = (i.width - a.width * o) / 2, l = (i.height - a.height * o) / 2, m(0, 0))
    })
  }

  function loadImage(e, t, n) {
    var i = document.createElement("img");
    i.onload = function () {
      s[t] = i, n()
    }, i.src = e
  }

  function renderSpinner(e, t, n) {
    h.save(), h.translate(i.width / 2, i.height / 2), h.rotate(e * Math.PI / 180), h.translate(-i.width / 2, -i.height / 2), h.globalAlpha = t, h.drawImage(n, 0, 0, n.width, n.height, c, l, n.width * o, n.height * o), h.globalAlpha = 1, h.restore()
  }

  function renderSpinnerCenter() {
    h.save(), a = s.middle, h.drawImage(a, 0, 0, a.width, a.height, c, l, a.width * o, a.height * o), h.restore()
  }

  Object.defineProperty(t, "__esModule", {value: !0});
  var i, s, a, r, d, o, c, l, p = {
    stage0: "assets/spinners/spiner_stage0.png",
    stage1: "assets/spinners/spiner_stage1.png",
    stage2: "assets/spinners/spiner_stage2.png",
    stage3: "assets/spinners/spiner_stage3.png",
    middle: "assets/spinners/spiner_center.png"
  }, u = document.getElementById("game-wrapper"), h = null;
  !function () {
    i = document.createElement("canvas"), i.id = "spinner-ctx", i.width = 640, i.height = 640, h = i.getContext("2d"), u.appendChild(i), loadImages()
  }();
  var m = t.render = function (e, t) {
    h.clearRect(0, 0, i.width, i.height);
    var n = 0;
    t > 1200 ? (n = (t - 1200) / 400, renderSpinner(e, 1, s.stage3)) : t > 800 ? (n = (t - 800) / 400, renderSpinner(e, 1, s.stage2)) : t > 400 ? (n = (t - 400) / 400, renderSpinner(e, 1, s.stage1), renderSpinner(e, .5 * n + .5, s.stage2)) : renderSpinner(e, 1, s.stage0), renderSpinnerCenter()
  }
}]);
//# sourceMappingURL=dist.min.js.map
