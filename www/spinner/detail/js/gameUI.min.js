var Game = {}, GameeBridge = {}, gameeUI = {}, timer;
window.scrollerConfigHorizontal = {scroll: "horizontal", lockOnDirection: true};
function showConsole() {
  if (typeof console != "undefined")if (typeof console.log != "undefined")console.olog = console.log; else console.olog = function () {
  };
  console.log = function (message) {
    console.olog(message);
    $("body").prepend('<p style="color: black">' + message + "</p>")
  };
  console.error = console.debug = console.info = console.log
}
Pace.on("done", function () {
  gameeUI.gameLoaded();
  resizeElements(window.innerWidth, window.innerHeight);
  $(".preloader").hide()
});
if ("addEventListener" in document) {
  document.addEventListener("DOMContentLoaded", function () {
    FastClick.attach(document.body)
  }, false)
}
document.addEventListener("touchmove", function (e) {
  e.preventDefault()
}, false);
$(window).on("load", function () {
  var gameFrame = $(".gameFrame"), gameIframeSrc = $("#gameeFrameMobile"), userAgent = navigator.userAgent.toLowerCase();
  gameIframeSrc.attr("src", gameIframeSrc.data("src"));
  Game = gameeGame(gameFrame[0]);
  Game2 = gamee2Game(gameFrame[0], gameeUI);
  gameeUI.gameLoader.show();
  gameeUI.playBtn.hide();
  window.addEventListener("resize", function () {
    resizeElements(document.body.offsetWidth, document.body.offsetHeight)
  })
});
window.addEventListener("orientationchange", function () {
  setTimeout(function () {
    resizeElements(document.body.offsetWidth, document.body.offsetHeight)
  }, 500)
}, false);
var mql = window.matchMedia("(orientation: portrait)");
if (!mql.matches) {
  $("#alert").removeClass("hide").addClass("visible")
}
mql.addListener(function (m) {
  if (m.matches) {
    enableScroll();
    $("#alert").removeClass("visible").addClass("hide");
    if (gameeUI.currentState === "paused") {
      gameeUI.gameResume()
    }
  } else {
    disableScroll();
    $("#alert").removeClass("hide").addClass("visible");
    if (gameeUI.currentState === "playing") {
      gameeUI.gamePause()
    }
  }
});
GameeBridge = {
  resume: function () {
    isGamee2() ? Game2.resume() : Game.resume()
  }, start: function () {
    isGamee2() ? Game2.start(false) : ""
  }, pause: function () {
    isGamee2() ? Game2.pause() : Game.pause()
  }, restart: function () {
    isGamee2() ? Game2.start(false) : Game.restart()
  }
};
gameeUI = {
  currentState: "init",
  user: null,
  anonymous_id: null,
  firstPlay: true,
  gameHighscore: 0,
  highscoreBeat: false,
  playTime: 0,
  score: 0,
  myRank: null,
  myPhoto: null,
  gameeVer: 1,
  allRankings: {},
  gameLoaded: function () {
    var htmlEl = $("html"), gameFrame = $(".gameFrame");
    htmlEl.addClass("loaded");
    gameeUI.startOverlay.show();
    gameFrame.focus();
  },
  init: function (data, cb) {
    console.log("GameeJS - 2: init");
    this.gameeVer = 2;
    cb(data)
  },
  gameReady: function () {
    console.log("GameeJS 2: ready");
    gameeUI.gameLoader.hide();
    gameeUI.playBtn.show()
  },
  requestSocial: function () {
    console.log("GameeJS 2: Socials requested")
  },
  saveState: function () {
    console.log("GameeJS 2: save state")
  },
  gameStart: function () {
    console.log("Game Start");
    gameeUI.currentState = "playing";
    gameeUI.timer.start();
    gameeUI.updateScore(0);
    if (isGamee2()) {
      GameeBridge.start(false)
    }
  },
  gameBegin: function () {
    gameeUI.startOverlay.hide();
    gameeUI.playBtn.hide();
    gameeUI.controls.show();
    if (isGamee2()) {
      gameeUI.gameStart()
    }
  },
  gameOver: function () {
    var totalScore = parseInt($(".totalScore").html()), highScore = parseInt($(".highscore").html());
    $("#overlay-end .rankings, #overlay-end .ranks-wrap").removeClass("visible");
    gameeUI.currentState = "gameOver";
    gameeUI.highscoreBeat = false;
    gameeUI.setScoreCustomText("Good job");
    if ($(".relatedGames").length) {
      window.scroller4 = new Scroller("#overlay-end .relatedGames .scrollArea", scrollerConfigHorizontal)
    }
    gameeUI.overlay.show();
    gameeUI.controls.hide();
    gameeUI.restartBtn.show();
    gameeUI.saveScore(gameeUI.score);
    gameeUI.updateHighscore(gameeUI.score);
    gameeUI.timer.stop()
  },
  gameRestart: function () {
    GameeBridge.restart();
    gameeUI.overlay.hide();
    gameeUI.controls.show();
    gameeUI.restartBtn.hide();
    $(".this-share").removeClass("visible");
    $(".overlay .this-share a").css("opacity", "0");
    $("#overlay-end .rankings .item").css("opacity", "0");
    $(".ranks-wrap").removeClass("visible")
  },
  gamePause: function () {
    gameeUI.currentState = "paused";
    GameeBridge.pause();
    gameeUI.overlayPause.show();
    gameeUI.controls.hide();
    gameeUI.resumeBtn.show();
    $(".your_score").addClass("paused");
    gameeUI.timer.pause()
  },
  gameResume: function () {
    gameeUI.currentState = "playing";
    gameeUI.overlayPause.hide();
    gameeUI.timer.resume();
    gameeUI.resumeBtn.hide();
    gameeUI.controls.show();
    $(".your_score").removeClass("paused");
    GameeBridge.resume()
  },
  setController: function (i) {
    gameeUI.gameLoader.hide();
    gameeUI.playBtn.show()
  },
  updateScore: function (i) {
    var totalScore = $(".totalScore");
    gameeUI.score = i;
    totalScore.html(parseInt(i));
    gameeUI.checkRankStatus(i)
  },
  updateOverall: function (i) {
    gameGlobals.overallScore = i
  },
  updateHighscore: function (i) {
    if (gameeUI.score > gameeUI.gameHighscore) {
      gameeUI.gameHighscore = i;
      gameeUI.firstPlay = false;
      gameeUI.setScoreMessage("New highscore")
    } else {
      gameeUI.setScoreMessage("You scored")
    }
  },
  checkRankStatus: function (currentScore) {
    var myHighscore = gameeUI.gameHighscore, rankElement = $(".rankStatus"), rankInner = $(".inner", ".rankStatus"), highscoreMsg = '<div class="highscore"><span class="ic"></span> Highscore beat</div>', showRank, highscoreBeat = gameeUI.highscoreBeat, allRankings = gameeUI.allRankings, pIndex = allRankings.length - 1;
    if (currentScore > myHighscore && currentScore > 0 && highscoreBeat === false && gameeUI.firstPlay === false) {
      rankInner.html(highscoreMsg);
      showRank = true;
      gameeUI.highscoreBeat = true
    }
    if (Object.keys(allRankings).length != 0) {
      if (currentScore > allRankings[pIndex].score) {
        if (gameeUI.highscoreBeat === true && gameeUI.myRank !== allRankings[pIndex].rank) {
          rankInner.html('<div class="person"><img src="' + addProfilePicture(allRankings[pIndex].profile_picture) + '" class="pic" width="18" /> <span class="name">' + allRankings[pIndex].username + "</span> beat</div>");
          showRank = true
        }
        allRankings.splice(pIndex)
      }
    }
    if (showRank) {
      rankElement.show();
      setTimeout(function () {
        rankElement.hide();
        showRank = false
      }, 2200)
    }
  },
  setScoreMessage: function (string) {
    $(".you_scored_text", ".your_score").html(string)
  },
  setScoreCustomText: function (string) {
    $(".custom_text", ".your_score").html(string)
  },
  overlay: {
    show: function () {
      $("#canvasWrap").addClass("overlayVisible");
      $("#overlay-end").addClass("visible");
      $("#controls").addClass("visible")
    }, hide: function () {
      $("#canvasWrap").removeClass("overlayVisible");
      $("#overlay-end").removeClass("visible");
      $("#controls").removeClass("visible")
    }
  },
  overlayPause: {
    show: function () {
      $("#canvasWrap").addClass("overlayVisible");
      $("#overlay-pause").addClass("visible");
      $("#controls").addClass("visible")
    }, hide: function () {
      $("#canvasWrap").removeClass("overlayVisible");
      $("#overlay-pause").removeClass("visible");
      $("#controls").removeClass("visible")
    }
  },
  startOverlay: {
    show: function () {
      $("#canvasWrap").addClass("overlayVisible");
      $("#overlay-start").addClass("visible");
      $("#controls").addClass("visible")
    }, hide: function () {
      $("#canvasWrap").removeClass("overlayVisible");
      $("#overlay-start").removeClass("visible");
      $("#controls").removeClass("visible");
      $("#overlay-start .ranks-wrap").removeClass("visible")
    }
  },
  controls: {
    show: function () {
      $("#controller").addClass("visible")
    }, hide: function () {
      $("#controller").removeClass("visible")
    }
  },
  dataLoader: {
    show: function () {
    }, hide: function () {
    }
  },
  ranksLoading: {
    show: function () {
      $(".spinner", ".rankings").show()
    }, hide: function () {
      $(".spinner", ".rankings").hide()
    }
  },
  gameLoader: {
    show: function () {
      $(".gameLoading").remove();
      $("#controls .cWrap").append('<div class="gameLoading"><div class="icn"></div></div>');
      $("#overlay-start .transform").append('<div class="gameLoading fs-loading"><div class="icn"></div></div>')
    }, hide: function () {
      $(".gameLoading").remove();
      $("#overlay-start .rankings").addClass("loaded").removeClass("loading")
    }
  },
  restartBtn: {
    show: function () {
      $(".cLayout.restart, .control-fs-restart").addClass("visible")
    }, hide: function () {
      $(".cLayout.restart, .control-fs-restart").removeClass("visible")
    }
  },
  playBtn: {
    show: function () {
      $(".cLayout.play, .control-fs-play").addClass("visible")
    }, hide: function () {
      $(".cLayout.play, .control-fs-play").removeClass("visible")
    }
  },
  resumeBtn: {
    show: function () {
      $(".cLayout.resume, .control-fs-resume").addClass("visible")
    }, hide: function () {
      $(".cLayout.resume, .control-fs-resume").removeClass("visible")
    }
  },
  fullRankings: {
    show: function () {
      $("#overlay-standing .in").css("max-height", window.innerHeight - 72 + "px");
      $("#overlay-standing").addClass("visible");
      $("#overlay-standing").removeClass("hide")
    }, hide: function () {
      $("#overlay-standing").removeClass("visible");
      $("#overlay-standing").addClass("hide");
      $("#overlay-standing .items").html("")
    }
  },
  timer: {
    start: function () {
      timer = setInterval(function () {
        ++gameeUI.playTime
      }, 1e3)
    }, pause: function () {
      clearTimeout(timer)
    }, resume: function () {
      timer = setInterval(function () {
        ++gameeUI.playTime
      }, 1e3)
    }, stop: function () {
      clearTimeout(timer);
      gameeUI.playTime = 0
    }
  },
  sendMixpanel: function (totalScore) {
    mixpanel.track("Game Played", {
      "game name": gameGlobals.game_name,
      "game genre": gameGlobals.game_genre,
      "game score": totalScore,
      "game play time": gameeUI.playTime,
      source: gameGlobals.game_source,
      "web version": "mobile"
    })
  },
  sendMixpanelShare: function (share_type, share_screen, share_version) {
    mixpanel.track("Web Game Shared", {type: share_type, screen: share_screen, "web version": share_version})
  },
  setGameOverRankings: function (data) {
    var ranks = data.result.ranking, beforeMe = Object.keys(ranks.beforeMe).length != 0 ? ranks.beforeMe : "", beforeMeArr = Object.keys(beforeMe).map(function (key) {
      return beforeMe[key]
    }), beforeMeArrRev = beforeMeArr.reverse(), afterMe = Object.keys(ranks.afterMe).length != 0 ? ranks.afterMe : "", afterMeArr = Object.keys(afterMe).map(function (key) {
      return afterMe[key]
    }), afterMeArrRev = afterMeArr.reverse(), me = ranks.me, beforeRankTpl = "", afterRankTpl = "", versusTpl = "", friendPlaceholderTpl = "";
    var countTotalPlayers = Object.keys(beforeMe).length + Object.keys(afterMe).length + 1;
    $("#overlay-end .rankings .items .item, #overlay-pause .rankings .items .item").remove();
    if (Object.keys(ranks.afterMe).length != 0) {
      for (var k in afterMeArrRev) {
        afterRankTpl += '<div class="item"><div class="pic_wrap"><img src="' + addProfilePicture(afterMeArrRev[k].profile_picture) + '" class="pic" /></div><div class="username"><span>' + formatUsername(afterMeArrRev[k].username) + '</span></div><div class="points">' + (afterMeArrRev[k].score ? afterMeArrRev[k].score : "-") + "</div></div>"
      }
    }
    if (Object.keys(ranks.me).length != 0) {
      meRankTpl = '<div class="item me"><div class="pic_wrap"><img src="' + addProfilePicture(me.profile_picture) + '" class="pic" /></div><div class="username"><span>Me</span></div><div class="points">' + (me.score ? me.score : "-") + "</div></div>"
    }
    if (countTotalPlayers === 1) {
      versusTpl += '<div class="item vs">vs</div>';
      $(".rankings .headline").html("You vs friend");
      $(".rankings .headline").addClass("text-center")
    } else {
      $(".rankings .headline").html("Group rankings")
    }
    if (countTotalPlayers <= 3) {
      friendPlaceholderTpl += '<div class="item friend challenge-friends ' + onPlatform() + '"><div class="pic_wrap"><img src="../detail/assets/svg/rankings-icn-empty-user.svg" class="pic" /></div><div class="username"><span>Friend</span></div><div class="points">-</div></div>'
    }
    if (Object.keys(ranks.beforeMe).length != 0) {
      for (var k in beforeMeArrRev) {
        beforeRankTpl += '<div class="item"><div class="pic_wrap"><img src="' + addProfilePicture(beforeMeArrRev[k].profile_picture) + '" class="pic" /></div><div class="username"><span>' + formatUsername(beforeMeArrRev[k].username) + '</span></div><div class="points">' + (beforeMeArrRev[k].score ? beforeMeArrRev[k].score : "-") + "</div></div>"
      }
    }
    $("#overlay-end .rankings .items, #overlay-pause .rankings .items").append(afterRankTpl + meRankTpl + beforeRankTpl + versusTpl + friendPlaceholderTpl);
    if (countTotalPlayers > 4) {
      window.scroller2.refresh();
      window.scroller3.refresh()
    }
    window.dispatchEvent(new Event("resize"))
  },
  setStartRankings: function (data) {
    var ranks = data.result.ranking, beforeMe = Object.keys(ranks.beforeMe).length != 0 ? ranks.beforeMe : "", beforeMeArr = Object.keys(beforeMe).map(function (key) {
      return beforeMe[key]
    }), beforeMeArrRev = beforeMeArr.reverse(), afterMe = Object.keys(ranks.afterMe).length != 0 ? ranks.afterMe : "", afterMeArr = Object.keys(afterMe).map(function (key) {
      return afterMe[key]
    }), afterMeArrRev = afterMeArr.reverse(), me = ranks.me, beforeRankTpl = "", afterRankTpl = "", versusTpl = "", friendPlaceholderTpl = "";
    var countTotalPlayers = Object.keys(beforeMe).length + Object.keys(afterMe).length + 1;
    if (countTotalPlayers > 3) {
      $(".cRankingsBtn").css("display", "inline-block")
    }
    $("#overlay-start .rankings .items .item, #overlay-pause .rankings .items .item").remove();
    if (Object.keys(ranks.afterMe).length != 0) {
      for (var k in afterMeArrRev) {
        afterRankTpl += '<div class="item"><div class="pic_wrap"><img src="' + addProfilePicture(afterMeArrRev[k].profile_picture) + '" class="pic" /></div><div class="username"><span>' + formatUsername(afterMeArrRev[k].username) + '</span></div><div class="points">' + (afterMeArrRev[k].score ? afterMeArrRev[k].score : "-") + "</div></div>"
      }
    }
    if (Object.keys(ranks.me).length != 0) {
      var firstCol = "", myPhoto;
      if (me.score > 0) {
        gameeUI.gameHighscore = parseInt(me.score);
        gameeUI.firstPlay = false
      }
      if (isFacebook()) {
        myPhoto = gameeUI.myPhoto
      } else {
        if (me.profile_picture) {
          myPhoto = me.profile_picture
        }
      }
      meRankTpl = '<div class="item me"><div class="pic_wrap"><img src="' + addProfilePicture(myPhoto) + '" class="pic" /></div><div class="username"><span>Me</span></div><div class="points">' + (me.score ? me.score : "-") + "</div></div>"
    }
    if (countTotalPlayers === 1) {
      versusTpl += '<div class="item vs">vs</div>';
      $(".rankings .headline").html("You vs friend");
      $(".rankings .headline").addClass("text-center")
    } else {
      $(".rankings .headline").html("Group rankings")
    }
    if (countTotalPlayers <= 3) {
      friendPlaceholderTpl += '<div class="item friend challenge-friends ' + onPlatform() + '"><div class="pic_wrap"><img src="../detail/assets/svg/rankings-icn-empty-user.svg" class="pic" /></div><div class="username"><span>Friend</span></div><div class="points">-</div></div>'
    }
    if (Object.keys(ranks.beforeMe).length != 0) {
      for (var k in beforeMeArrRev) {
        beforeRankTpl += '<div class="item"><div class="pic_wrap"><img src="' + addProfilePicture(beforeMeArrRev[k].profile_picture) + '" class="pic" /></div><div class="username"><span>' + formatUsername(beforeMeArrRev[k].username) + '</span></div><div class="points">' + (beforeMeArrRev[k].score ? beforeMeArrRev[k].score : "-") + "</div></div>"
      }
    }
    $("#overlay-start .rankings .items, #overlay-pause .rankings .items").append(afterRankTpl + meRankTpl + beforeRankTpl + versusTpl + friendPlaceholderTpl);
    if (countTotalPlayers > 4) {
      window.scroller1 = new Scroller("#overlay-start .rankings .scrollArea", scrollerConfigHorizontal);
      window.scroller2 = new Scroller("#overlay-end .rankings .scrollArea", scrollerConfigHorizontal);
      window.scroller3 = new Scroller("#overlay-pause .rankings .scrollArea", scrollerConfigHorizontal)
    }
    transformOverlay($("#overlay-start .transform"), true);
    window.dispatchEvent(new Event("resize"))
  },
  saveScore: function (score) {
    var url = window.location.pathname, username = gameeUI.user, timestamp = (new Date).getTime(), dataId = $("#dataId").data(), hash = CryptoJS.AES.encrypt(JSON.stringify({
      score: score,
      timestamp: timestamp
    }), dataId.id, {format: CryptoJSAesJson}).toString(), sData = {
      score: score,
      url: url,
      play_time: gameeUI.playTime,
      hash: hash,
      username: username,
      anonymous_id: gameeUI.anonymous_id
    };
    if (isFacebook()) {
      var fbUserData = FacebookUserData.getUserData();
      sData["app_scoped_user_id"] = fbUserData.app_scoped_user_id;
      sData["user_id"] = fbUserData.user_id
    }
    gameeUI.sendScoreData(sData)
  },
  sendScoreData: function (sData) {
    var jsonStringData = JSON.stringify(sData), ranksFailedEl = $(".rankingsFailed"), apiUrl = getBotsApiUrl() + "/set-web-score-qkfnsog26w7173c9pk7whg0iau7zwhdkfd7ft3tn";
    gameeUI.ranksLoading.show();
    $("#overlay-end .rankings .items .item, #overlay-pause .rankings .items .item").remove();
    $("#overlay-end .rankings, #overlay-end .ranks-wrap").addClass("visible");
    $.ajax({
      type: "POST", url: apiUrl, data: jsonStringData, success: function (data) {
        gameeUI.ranksLoading.hide();
        if (isTelegram() || isKik() || isFacebook()) {
          if (!isEmpty(data.result.ranking)) {
            gameeUI.setGameOverRankings(data);
            gameeUI.saveRankingsToObject(data)
          }
        }
        $(".this-share").addClass("visible")
      }, error: function (jqXHR, textStatus) {
        gameeUI.ranksLoading.hide();
        ranksFailedEl.show()
      }, timeout: 8e3, dataType: "json", crossDomain: true
    })
  },
  setFullRankings: function (data) {
    var rank = data.result.ranking, myRank = data.result.myRank === null ? "0" : data.result.myRank, membersCount = data.result.membersCount;
    $("#overlay-standing .membersCount").html(membersCount);
    $("#overlay-standing .myPosition").html(myRank + nth(myRank));
    $("#overlay-standing .items .row").remove();
    if (Object.keys(rank).length > 0) {
      for (var r in rank) {
        var meClass = rank[r].rank === myRank ? "me" : "", firstCol = "", photo = rank[r].profile_picture;
        $("#overlay-standing .items").append('<div class="row ' + meClass + '">' + '<div class="line">' + '<div class="number">' + rank[r].rank + ".</div>" + '<div class="pic_wrap"><img src="' + addProfilePicture(photo) + '" class="pic" /></div>' + '<div class="name"><span>' + rank[r].username + "</span></div>" + '<div class="points">' + rank[r].score + "</div>" + "</div>" + "</div>")
      }
    }
  },
  saveRankingsToObject: function (data) {
    var ranks = data.result.ranking.beforeMe, ranksArr = Object.keys(ranks).map(function (key) {
      return ranks[key]
    }), myRank = data.result.ranking.me.rank === null ? "0" : data.result.ranking.me.rank;
    if (Object.keys(ranks).length > 0) {
      gameeUI.allRankings = ranksArr;
      gameeUI.myRank = myRank
    }
  },
  getFullRankings: function () {
    var url = window.location.pathname, username = gameeUI.user;
    var sData = {url: escape(url)};
    if (gameeUI.anonymous_id != null) {
      username = ""
    }
    if (isFacebook()) {
      sData.facebook_user_id = FacebookUserData.getUserData().app_scoped_user_id
    }
    if (isKik()) {
      sData.username = username
    }
    var apiUrl = getBotsApiUrl() + "/api/game-url-ranking";
    gameeUI.dataLoader.show();
    $.ajax({
      type: "GET", url: apiUrl, data: sData, xhrFields: {withCredentials: true}, success: function (data) {
        gameeUI.dataLoader.hide();
        gameeUI.setFullRankings(data);
        enableScroll()
      }, beforeSend: function (xhr) {
        xhr.setRequestHeader("Authorization", "Basic " + btoa("web-api:1k2tnlowfvzfjursfhf523fuenc1guzwxfq8jgc8"))
      }, error: function (jqXHR, textStatus) {
        gameeUI.dataLoader.hide()
      }, timeout: 8e3, dataType: "json", crossDomain: true
    })
  },
  getStats: function () {
    var url = window.location.pathname, username = gameeUI.user;
    var sData = {url: escape(url)};
    if (gameeUI.anonymous_id != null) {
      username = ""
    }
    if (isKik()) {
      sData.username = username
    }
    if (isFacebook()) {
      var oThis = this;
      FacebookUserData.addAfterLoginCallback(function () {
        sData.facebook_user_id = FacebookUserData.getUserData().app_scoped_user_id;
        oThis.checkFbStatus(FacebookUserData.getUserData());
        if (FacebookUserData.isLoggedIn()) {
          oThis.getSurroundingRankings(sData)
        } else {
          $("#overlay-start .ranks-wrap").addClass("visible");
          $(".fb-connect").show();
          $("#overlay-start .rankings, #overlay-start .this-share").hide()
        }
      })
    } else {
      this.getSurroundingRankings(sData)
    }
  },
  getSurroundingRankings: function (sData) {
    var apiUrl = getBotsApiUrl() + "/api/game-url-surrounding-ranking", ranksFailedEl = $(".rankingsFailed");
    gameeUI.ranksLoading.show();
    $("#overlay-start .rankings, #overlay-pause .rankings, #overlay-start .ranks-wrap").addClass("visible");
    $.ajax({
      type: "GET", url: apiUrl, data: sData, success: function (data) {
        gameeUI.ranksLoading.hide();
        if (!isEmpty(data.result.ranking)) {
          gameeUI.setStartRankings(data);
          if (isFacebook() || isTelegram() || isKik()) {
            gameeUI.saveRankingsToObject(data)
          }
        }
      }, xhrFields: {withCredentials: true}, beforeSend: function (xhr) {
        xhr.setRequestHeader("Authorization", "Basic " + btoa("web-api:1k2tnlowfvzfjursfhf523fuenc1guzwxfq8jgc8"))
      }, error: function (jqXHR, textStatus) {
        gameeUI.ranksLoading.hide();
        ranksFailedEl.show()
      }, timeout: 8e3, crossDomain: true
    })
  },
  kikPickFriends: function () {
    kik.pickUsers(function (users) {
      if (!users) {
      } else {
        users.forEach(function (user) {
          kik.send(user.username, {
            title: "Let's play this game! ;)",
            text: "... " + gameGlobals.game_name + " " + window.location.href,
            pic: gameGlobals.game_img
          })
        })
      }
    })
  }
};
function transformOverlay(div, proportional) {
  var currentWidth = div.innerWidth(), currentHeight = div.innerHeight(), availableHeight = $("#canvasWrap").height(), availableWidth = $("#gameeFrameMobile").width(), scaleX = availableWidth / 6.8 / 100, scaleY = availableHeight / 5.36 / 100;
  if (proportional) {
    scaleX = Math.min(scaleX, scaleY);
    scaleY = scaleX
  }
  var translationX = Math.round((availableWidth - currentWidth) / 2);
  var translationY = Math.round((availableHeight - currentHeight) / 2 - 50);
  div.css({
    "-webkit-transform": "translate(" + translationX + "px, " + translationY + "px) scale3d(" + scaleX + ", " + scaleY + ", 1)",
    transform: " translate(" + translationX + "px, " + translationY + "px) scale3d(" + scaleX + ", " + scaleY + ", 1)"
  })
}
function transformControls(div, proportional) {
  var controller = $("#controller"), currentWidth = div.innerWidth(), currentHeight = div.innerHeight(), scaleX = (currentWidth - 190) / 2.7 / 100, scaleY = currentHeight / 2.7 / 100;
  if (proportional) {
    scaleX = Math.min(scaleX, scaleY);
    scaleY = scaleX
  }
  controller.css({
    "-webkit-transform": "scale3d(" + scaleX + ", " + scaleY + ", 1)",
    transform: "scale3d(" + scaleX + ", " + scaleY + ", 1)"
  })
}
function transformControls2(div, proportional) {
  var restart = $("#restart"), play = $("#play"), resume = $("#control-resume"), gameLoading = $(".gameLoading"), currentWidth = div.innerWidth(), currentHeight = div.innerHeight(), scaleX = currentWidth / 2 / 100, scaleY = currentHeight / 2 / 100;
  if (proportional) {
    scaleX = Math.min(scaleX, scaleY);
    scaleY = scaleX
  }
  if (scaleX >= .9) {
    scaleX = .9;
    scaleY = .9
  }
  restart.css({
    "-webkit-transform": "scale3d(" + scaleX + ", " + scaleY + ", 1)",
    transform: "scale3d(" + scaleX + ", " + scaleY + ", 1)"
  });
  play.css({
    "-webkit-transform": "scale3d(" + scaleX + ", " + scaleY + ", 1)",
    transform: "scale3d(" + scaleX + ", " + scaleY + ", 1)"
  });
  resume.css({
    "-webkit-transform": "scale3d(" + scaleX + ", " + scaleY + ", 1)",
    transform: "scale3d(" + scaleX + ", " + scaleY + ", 1)"
  });
  gameLoading.css({
    "-webkit-transform": "scale3d(" + scaleX + ", " + scaleY + ", 1)",
    transform: "scale3d(" + scaleX + ", " + scaleY + ", 1)"
  })
}
function resizeElements(intWidth, intHeight) {
  var iframe = document.getElementById("gameeFrameMobile"), canvasWrap = document.getElementById("canvasWrap"), controls = document.getElementById("controls"), overlayInner = $(".overlay .inner");
  overlayInner.css("max-width", intWidth + "px");
  iframe.width = intWidth;
  iframe.height = intWidth;
  iframe.style.width = intWidth + "px";
  iframe.style.height = intWidth + "px";
  canvasWrap.style.height = intWidth + "px";
  canvasWrap.style.width = intWidth + "px";
  controls.style.height = intHeight - intWidth + "px";
  transformOverlay($("#overlay-start .transform"), true);
  transformOverlay($("#overlay-end .transform"), true);
  transformOverlay($("#overlay-pause .transform"), true);
  transformControls($("#controls"), true);
  transformControls2($("#controls"), true)
}
var keys = {37: 1, 38: 1, 39: 1, 40: 1};
function preventDefault(e) {
  e = e || window.event;
  if (e.preventDefault)e.preventDefault();
  e.returnValue = false
}
function preventDefaultForScrollKeys(e) {
  if (keys[e.keyCode]) {
    preventDefault(e);
    return false
  }
}
function disableScroll() {
  document.addEventListener("touchmove", function (e) {
    e.preventDefault()
  }, false)
}
function enableScroll() {
  if (window.removeEventListener)window.removeEventListener("DOMMouseScroll", preventDefault, false);
  window.onmousewheel = document.onmousewheel = null;
  window.onwheel = null;
  window.ontouchmove = null;
  document.onkeydown = null;
  document.ontouchmove = null
}
$(".pauseGame").on("click", function () {
  gameeUI.gamePause()
});
$("#control-restart, .control-fs-restart").on("click", function (e) {
  gameeUI.gameRestart()
});
$("#control-play, .control-fs-play").on("click", function (e) {
  gameeUI.gameBegin()
});
$("#control-resume, .control-fs-resume").on("click", function (e) {
  gameeUI.gameResume()
});
$(".this-share a").on("click", function (e) {
  var share_screen = $(this).data("screen"), share_type = $(this).data("type"), share_version = $(this).data("version");
  gameeUI.sendMixpanelShare(share_type, share_screen, share_version)
});
$(document).on("click", ".challenge-friends.on-telegram, .challenge-btn.on-telegram", function (e) {
  TelegramGameProxy.shareScore()
});
$(document).on("click", ".challenge-friends.on-kik, .challenge-btn.on-kik", function (e) {
  gameeUI.kikPickFriends()
});
$(document).on("click", ".challenge-friends.on-fb, .challenge-btn.on-fb", function (e) {
  var botUrlBase = $("body").attr("data-bot-deep-link-base");
  var gameData = {
    type: "game",
    code: gameGlobals.game_code,
    name: FacebookUserData.getUserData().facebookName,
    score: gameeUI.gameHighscore,
    gender: FacebookUserData.getUserData().gender
  };
  var sharedUrl = botUrlBase + "?ref=" + encodeURIComponent(JSON.stringify(gameData));
  var messageToShare = {
    attachment: {
      type: "template",
      payload: {
        template_type: "generic",
        elements: [{
          title: "Can you beat me in " + gameGlobals.game_name,
          image_url: gameGlobals.game_img,
          subtitle: "My score is: " + gameData.score,
          default_action: {type: "web_url", url: sharedUrl},
          buttons: [{type: "web_url", url: sharedUrl, title: "▶ Play " + gameGlobals.game_name}]
        }]
      }
    }
  };
  MessengerExtensions.beginShareFlow(function success() {
  }, function error(errorCode, errorMessage) {
    var app_id = $("body").data("facebook-bot-app-id"), link = gameGlobals.game_fullUrl;
    window.open("fb-messenger://share?link=" + encodeURIComponent(link) + "&app_id=" + encodeURIComponent(app_id))
  }, messageToShare, "broadcast")
});
document.getElementById("control-oneButton").addEventListener("touchstart", function (e) {
  Game.buttonButtonDown()
}, false);
document.getElementById("control-oneButton").addEventListener("touchend", function (e) {
  setTimeout(function () {
    Game.buttonButtonUp()
  }, 20)
}, false);
document.getElementById("control-arrow-up").addEventListener("touchstart", function (e) {
  Game.upButtonDown()
}, false);
document.getElementById("control-arrow-up").addEventListener("touchend", function (e) {
  setTimeout(function () {
    Game.upButtonUp()
  }, 20)
}, false);
document.getElementById("control-arrow-down").addEventListener("touchstart", function (e) {
  Game.downButtonDown()
}, false);
document.getElementById("control-arrow-down").addEventListener("touchend", function (e) {
  setTimeout(function () {
    Game.downButtonUp()
  }, 20)
}, false);
document.getElementById("control-arrow-left").addEventListener("touchstart", function (e) {
  Game.leftButtonDown()
}, false);
document.getElementById("control-arrow-left").addEventListener("touchend", function (e) {
  setTimeout(function () {
    Game.leftButtonUp()
  }, 20)
}, false);
document.getElementById("control-arrow-right").addEventListener("touchstart", function (e) {
  Game.rightButtonDown()
}, false);
document.getElementById("control-arrow-right").addEventListener("touchend", function (e) {
  setTimeout(function () {
    Game.rightButtonUp()
  }, 20)
}, false);
document.getElementById("control-buttonA").addEventListener("touchstart", function (e) {
  Game.aButtonDown()
}, false);
document.getElementById("control-buttonA").addEventListener("touchend", function (e) {
  setTimeout(function () {
    Game.aButtonUp()
  }, 20)
}, false);
document.getElementById("control-buttonB").addEventListener("touchstart", function (e) {
  Game.bButtonDown()
}, false);
document.getElementById("control-buttonB").addEventListener("touchend", function (e) {
  setTimeout(function () {
    Game.bButtonUp()
  }, 20)
}, false);
$("#overlay-start .btn-reload").on("click", function (e) {
  var ranksFailedEl = $(".rankingsFailed");
  ranksFailedEl.hide();
  gameeUI.ranksLoading.show();
  gameeUI.getStats();
  e.preventDefault()
});
$("#overlay-end .btn-reload").on("click", function (e) {
  var ranksFailedEl = $(".rankingsFailed");
  ranksFailedEl.hide();
  gameeUI.ranksLoading.show();
  gameeUI.saveScore(gameeUI.score);
  e.preventDefault()
});
