function showConsole() {
  "undefined" != typeof console && ("undefined" != typeof console.log ? console.olog = console.log : console.olog = function () {
  }), console.log = function (e) {
    console.olog(e), $("body").prepend('<p style="color: black">' + e + "</p>")
  }, console.error = console.debug = console.info = console.log
}
function transformOverlay(e, a) {
  var t = e.innerWidth(), n = e.innerHeight(), i = $("#canvasWrap").height(), s = $("#gameeFrameMobile").width(), o = s / 6.8 / 100, r = i / 5.36 / 100;
  a && (o = Math.min(o, r), r = o);
  var l = Math.round((s - t) / 2), c = Math.round((i - n) / 2 - 50);
  e.css({
    "-webkit-transform": "translate(" + l + "px, " + c + "px) scale3d(" + o + ", " + r + ", 1)",
    transform: " translate(" + l + "px, " + c + "px) scale3d(" + o + ", " + r + ", 1)"
  })
}
function transformControls(e, a) {
  var t = $("#controller"), n = e.innerWidth(), i = e.innerHeight(), s = (n - 190) / 2.7 / 100, o = i / 2.7 / 100;
  a && (s = Math.min(s, o), o = s), t.css({
    "-webkit-transform": "scale3d(" + s + ", " + o + ", 1)",
    transform: "scale3d(" + s + ", " + o + ", 1)"
  })
}
function transformControls2(e, a) {
  var t = $("#restart"), n = $("#play"), i = $("#control-resume"), s = $(".gameLoading"), o = e.innerWidth(), r = e.innerHeight(), l = o / 2 / 100, c = r / 1.52 / 100;
  a && (l = Math.min(l, c), c = l), l >= 1 && (l = 1, c = 1), t.css({
    "-webkit-transform": "scale3d(" + l + ", " + c + ", 1)",
    transform: "scale3d(" + l + ", " + c + ", 1)"
  }), n.css({
    "-webkit-transform": "scale3d(" + l + ", " + c + ", 1)",
    transform: "scale3d(" + l + ", " + c + ", 1)"
  }), i.css({
    "-webkit-transform": "scale3d(" + l + ", " + c + ", 1)",
    transform: "scale3d(" + l + ", " + c + ", 1)"
  }), s.css({"-webkit-transform": "scale3d(" + l + ", " + c + ", 1)", transform: "scale3d(" + l + ", " + c + ", 1)"})
}
function resizeElements(e, a) {
  var t = document.getElementById("gameeFrameMobile"), n = document.getElementById("canvasWrap"), i = document.getElementById("controls"), s = $(".overlay .inner");
  s.css("max-width", e + "px"), t.width = e, t.height = e, t.style.width = e + "px", t.style.height = e + "px", n.style.height = e + "px", n.style.width = e + "px", i.style.height = a - e + "px", transformOverlay($("#overlay-start .transform"), !0), transformOverlay($("#overlay-end .transform"), !0), transformOverlay($("#overlay-pause .transform"), !0), transformControls($("#controls"), !0), transformControls2($("#controls"), !0)
}
function preventDefault(e) {
  e = e || window.event, e.preventDefault && e.preventDefault(), e.returnValue = !1
}
function preventDefaultForScrollKeys(e) {
  return keys[e.keyCode] ? (preventDefault(e), !1) : void 0
}
function disableScroll() {
  window.addEventListener && window.addEventListener("DOMMouseScroll", preventDefault, !1), window.onwheel = preventDefault, window.onmousewheel = document.onmousewheel = preventDefault, window.ontouchmove = preventDefault, document.onkeydown = preventDefaultForScrollKeys, document.ontouchmove = function (e) {
    e.preventDefault()
  }, document.addEventListener("touchmove", function (e) {
    e.preventDefault()
  }, !1)
}
function enableScroll() {
  window.removeEventListener && window.removeEventListener("DOMMouseScroll", preventDefault, !1), window.onmousewheel = document.onmousewheel = null, window.onwheel = null, window.ontouchmove = null, document.onkeydown = null, document.ontouchmove = null
}
var Game = {}, GameeBridge = {}, gameeUI = {}, timer,url;
window.scrollerConfigHorizontal = {scroll: "horizontal", lockOnDirection: !0}, Pace.on("done", function () {
  gameeUI.gameLoaded(), resizeElements(window.innerWidth, window.innerHeight), $(".preloader").hide();
  var e = $(".gameFrame"), a = $("#gameeFrameMobile");
  navigator.userAgent.toLowerCase();
  a.attr("src", a.data("src")), Game = gameeGame(e[0]), Game2 = gamee2Game(e[0], gameeUI), gameeUI.gameLoader.show(), gameeUI.playBtn.hide(), window.addEventListener("resize", function () {
    resizeElements(document.body.offsetWidth, document.body.offsetHeight)
  });
  var db = openDatabase('mydb', '1.0', 'OMIDDB', 2 * 1024 * 1024);
  db.transaction(function (tx) {
    tx.executeSql('SELECT d.val FROM MYGAME d WHERE d.name="score"', [], function (tx, results) {
      var len = results.rows.length, i, result = '';
      if (results.rows && results.rows.length != 0) {
        var a = results.rows.item(0).val.split(",");
        url = a[4];
      }
    });
  });
}), "addEventListener" in document && document.addEventListener("DOMContentLoaded", function () {
  FastClick.attach(document.body)
}, !1), disableScroll(), window.addEventListener("orientationchange", function () {
  setTimeout(function () {
    resizeElements(document.body.offsetWidth, document.body.offsetHeight)
  }, 500)
}, !1);
var mql = window.matchMedia("(orientation: portrait)");
mql.matches || $("#alert").removeClass("hide").addClass("visible"), mql.addListener(function (e) {
  e.matches ? (enableScroll(), $("#alert").removeClass("visible").addClass("hide"), "paused" === gameeUI.currentState && gameeUI.gameResume()) : (disableScroll(), $("#alert").removeClass("hide").addClass("visible"), "playing" === gameeUI.currentState && gameeUI.gamePause())
}), GameeBridge = {
  resume: function () {
    isGamee2() ? Game2.resume() : Game.resume()
  }, start: function () {
    isGamee2() ? Game2.start(!1) : ""
  }, pause: function () {
    isGamee2() ? Game2.pause() : Game.pause()
  }, restart: function () {
    isGamee2() ? Game2.start(!1) : Game.restart()
  }
}, gameeUI = {
  currentState: "init",
  user: null,
  anonymous_id: null,
  firstPlay: !0,
  gameHighscore: 0,
  highscoreBeat: !1,
  playTime: 0,
  score: 0,
  myRank: null,
  myPhoto: null,
  gameeVer: 1,
  allRankings: {},
  gameLoaded: function () {
    var e = $("html"), a = $(".gameFrame");
    e.addClass("loaded"), gameeUI.startOverlay.show();
    var db = openDatabase('mydb', '1.0', 'OMIDDB', 2 * 1024 * 1024);
    db.transaction(function (tx) {
      tx.executeSql('SELECT d.val FROM MYGAME d WHERE d.name="score"', [], function (tx, results) {
        var len = results.rows.length, i, result = '';
        if (results.rows && results.rows.length != 0) {
          var a = results.rows.item(0).val.split(",");
          if (a[0] == "false") {
            $("#home").css("display", "none");
          }
        }
      });
    });
    a.focus(), "undefined" != typeof kik && kik.enabled && kik.getUser(function (e) {
      e ? (gameeUI.user = e.username, gameeUI.getStats()) : (gameeUI.user = null, kik.getAnonymousUser(function (e) {
        gameeUI.anonymous_id = e
      }))
    }), (isTelegram() || isFacebook()) && gameeUI.getStats()
  },
  init: function (e, a) {
    console.log("GameeJS - 2: init"), this.gameeVer = 2, a(e)
  },
  gameReady: function () {
    console.log("GameeJS 2: ready"), gameeUI.gameLoader.hide(), gameeUI.playBtn.show()
  },
  requestSocial: function () {
    console.log("GameeJS 2: Socials requested")
  },
  saveState: function () {
    console.log("GameeJS 2: save state")
  },
  gameStart: function () {
    console.log("Game Start"), gameeUI.currentState = "playing", gameeUI.timer.start(), gameeUI.updateScore(0), isGamee2() && GameeBridge.start(!1)
  },
  gameBegin: function () {
    gameeUI.startOverlay.hide(), gameeUI.playBtn.hide(), gameeUI.controls.show(), isGamee2() && gameeUI.gameStart()
  },
  gameOver: function () {
    var e = parseInt($(".totalScore").html());
    parseInt($(".highscore").html());
    var db = openDatabase('mydb', '1.0', 'OMIDDB', 2 * 1024 * 1024);
    db.transaction(function (tx) {
      tx.executeSql('SELECT d.val FROM MYGAME d WHERE d.name="score"', [], function (tx, results) {
        var len = results.rows.length, i, result = '';
        if (results.rows && results.rows.length != 0) {
          var a = results.rows.item(0).val.split(",");
          if (a[0] == "false" && a[3] === "0") {
            a[3] = e;
            tx.executeSql('UPDATE MYGAME SET val=? WHERE name= "score"', [a.join(",")], function (tx, results) {
              $("#overlay-end .rankings, #overlay-end .ranks-wrap").removeClass("visible"), gameeUI.currentState = "gameOver", gameeUI.highscoreBeat = !1, gameeUI.setScoreCustomText(""), $(".relatedGames").length && (window.scroller4 = new Scroller("#overlay-end .relatedGames .scrollArea", scrollerConfigHorizontal)), gameeUI.overlay.show(), gameeUI.controls.hide(), setTimeout(function () {
                gameeUI.restartBtn.show()
              }, 500), gameeUI.timer.stop(),
                $("#control-restart").css("display", "none"), $(".control-fs-restart").css("display", "none");
            });
          } else {
            $("#overlay-end .rankings, #overlay-end .ranks-wrap").removeClass("visible"), gameeUI.currentState = "gameOver", gameeUI.highscoreBeat = !1, gameeUI.setScoreCustomText(""), $(".relatedGames").length && (window.scroller4 = new Scroller("#overlay-end .relatedGames .scrollArea", scrollerConfigHorizontal)), gameeUI.overlay.show(), gameeUI.controls.hide(), setTimeout(function () {
              gameeUI.restartBtn.show()
            }, 500), gameeUI.timer.stop();
            gameeUI.submitRecord.send(a[1], e, a[2], a[5]);
          }
        }
      });
    });
  },
  gameRestart: function () {
    GameeBridge.restart(), gameeUI.overlay.hide(), gameeUI.controls.show(), gameeUI.restartBtn.hide(), $(".this-share").removeClass("visible"), $(".overlay .this-share a").css("opacity", "0"), $("#overlay-end .rankings .item").css("opacity", "0"), $(".ranks-wrap").removeClass("visible")
  },
  gamePause: function () {
    gameeUI.currentState = "paused", GameeBridge.pause(), gameeUI.overlayPause.show(), gameeUI.controls.hide(), gameeUI.resumeBtn.show(), $(".your_score").addClass("paused"), gameeUI.timer.pause()
  },
  gameResume: function () {
    gameeUI.currentState = "playing", gameeUI.overlayPause.hide(), gameeUI.timer.resume(), gameeUI.resumeBtn.hide(), gameeUI.controls.show(), $(".your_score").removeClass("paused"), GameeBridge.resume()
  },
  setController: function (e) {
    gameeUI.gameLoader.hide(), gameeUI.playBtn.show()
  },
  checkFbStatus: function (e) {
  },
  game_tw_link: function (e) {
  },
  updateScore: function (e) {
    var a = $(".totalScore");
    gameeUI.score = e, a.html(parseInt(e)), gameeUI.checkRankStatus(e)
  },
  updateOverall: function (e) {
    gameGlobals.overallScore = e
  },
  updateHighscore: function (e) {
    gameeUI.score > gameeUI.gameHighscore ? (gameeUI.gameHighscore = e, gameeUI.firstPlay = !1, gameeUI.setScoreMessage("")) : gameeUI.setScoreMessage("امتیاز ")
  },
  checkRankStatus: function (e) {
  },
  setScoreMessage: function (e) {
    $(".you_scored_text", ".your_score").html(e)
  },
  setScoreCustomText: function (e) {
    $(".custom_text", ".your_score").html(e)
  },
  overlay: {
    show: function () {
      $("#canvasWrap").addClass("overlayVisible"), $("#overlay-end").addClass("visible"), $("#controls").addClass("visible")
    }, hide: function () {
      $("#canvasWrap").removeClass("overlayVisible"), $("#overlay-end").removeClass("visible"), $("#controls").removeClass("visible")
    }
  },
  overlayPause: {
    show: function () {
      $("#canvasWrap").addClass("overlayVisible"), $("#overlay-pause").addClass("visible"), $("#controls").addClass("visible")
    }, hide: function () {
      $("#canvasWrap").removeClass("overlayVisible"), $("#overlay-pause").removeClass("visible"), $("#controls").removeClass("visible")
    }
  },
  submitRecord: {
    send: function (id, score, token, u) {
      var request = $.ajax({
        url: "https://dagala.cfapps.io/api/1/submitRecord",
        type: "POST",
        contentType: "application/json",
        headers: {"Authorization": token},
        data: JSON.stringify({gameId: id, score: score, user: u})
      });
      request.done(function (msg) {
        var db = openDatabase('mydb', '1.0', 'OMIDDB', 2 * 1024 * 1024);
        db.transaction(function (tx) {
          tx.executeSql('DELETE FROM MYGAME WHERE name="wasInGame"', [], function (tx, results) {
            tx.executeSql('INSERT INTO MYGAME (name, val) VALUES (?, ?)', ["wasInGame", true]);
          });
        });
      });
      request.fail(function (jqXHR, textStatus) {
        $(".alert").css("display", "block");
        setTimeout(function () {
          $(".alert").css("display", "none");
        }, 3000);
      });
    }
  },
  startOverlay: {
    show: function () {
      $("#canvasWrap").addClass("overlayVisible"), $("#overlay-start").addClass("visible"), $("#controls").addClass("visible")
    }, hide: function () {
      $("#canvasWrap").removeClass("overlayVisible"), $("#overlay-start").removeClass("visible"), $("#controls").removeClass("visible"), $("#overlay-start .ranks-wrap").removeClass("visible")
    }
  },
  controls: {
    show: function () {
      $("#controller").addClass("visible")
    }, hide: function () {
      $("#controller").removeClass("visible")
    }
  },
  dataLoader: {
    show: function () {
    }, hide: function () {
    }
  },
  ranksLoading: {
    show: function () {
      $(".spinner", ".rankings").show()
    }, hide: function () {
      $(".spinner", ".rankings").hide()
    }
  },
  shareLoading: {
    show: function () {
      $(".challenge-friends").prepend('<span class="spinner"></span>')
    }, hide: function () {
      $(".spinner", ".challenge-friends").remove()
    }
  },
  gameLoader: {
    show: function () {
      $(".gameLoading").remove(), $("#controls .cWrap").append('<div class="gameLoading"><div class="icn"></div></div>'), $("#overlay-start .transform").append('<div class="gameLoading fs-loading"><div class="icn"></div></div>')
    }, hide: function () {
      $(".gameLoading").remove(), $("#overlay-start .rankings").addClass("loaded").removeClass("loading")
    }
  },
  restartBtn: {
    show: function () {
      $(".cLayout.restart, .control-fs-restart").addClass("visible")
    }, hide: function () {
      $(".cLayout.restart, .control-fs-restart").removeClass("visible")
    }
  },
  playBtn: {
    show: function () {
      $(".cLayout.play, .control-fs-play").addClass("visible")
    }, hide: function () {
      $(".cLayout.play, .control-fs-play").removeClass("visible")
    }
  },
  resumeBtn: {
    show: function () {
      $(".cLayout.resume, .control-fs-resume").addClass("visible")
    }, hide: function () {
      $(".cLayout.resume, .control-fs-resume").removeClass("visible")
    }
  },
  fullRankings: {
    show: function () {
      $("#overlay-standing .in").css("max-height", document.body.offsetHeight - 130 + "px"), $("#gameeMobile #overlay-standing").addClass("visible"), gameeUI.getFullRankings()
    }, hide: function () {
      disableScroll(), $("#gameeMobile #overlay-standing").removeClass("visible")
    }
  },
  timer: {
    start: function () {
      timer = setInterval(function () {
        ++gameeUI.playTime
      }, 1e3)
    }, pause: function () {
      clearTimeout(timer)
    }, resume: function () {
      timer = setInterval(function () {
        ++gameeUI.playTime
      }, 1e3)
    }, stop: function () {
      clearTimeout(timer), gameeUI.playTime = 0
    }
  },
  sendMixpanel: function (e) {
  },
  sendMixpanelShare: function (e, a, t) {
  },
  setGameOverRankings: function (e) {
  },
  setStartRankings: function (e) {
  },
  saveScore: function (e) {
  },
  sendScoreData: function (e) {
  },
  setFullRankings: function (e) {
  },
  saveRankingsToObject: function (e) {
  },
  getFullRankings: function () {
  },
  getStats: function () {
  },
  getSurroundingRankings: function (e) {
  },
  kikPickFriends: function () {
  }
};
var keys = {37: 1, 38: 1, 39: 1, 40: 1}, webviewProvider = function () {
}();
$(".re-request-friends-permission").on("click", function (e) {
  e.preventDefault(), FacebookUserData.forceRelogin()
}), $(".action-fb-connect").on("click", function (e) {
  e.preventDefault(), FacebookUserData.forceConnect()
}), $(".pauseGame").on("click", function () {
  gameeUI.gamePause()
}), $("#control-restart, .control-fs-restart").on("click touchend", function (e) {
  e.preventDefault(), gameeUI.gameRestart()
}), $("#control-play, .control-fs-play").on("click touchend", function (e) {
  e.preventDefault(), gameeUI.gameBegin()
}), $("#control-resume, .control-fs-resume").on("click", function (e) {
  gameeUI.gameResume()
}), document.getElementById("control-oneButton").addEventListener("touchstart", function (e) {
  Game.buttonButtonDown()
}, !1), document.getElementById("control-oneButton").addEventListener("touchend", function (e) {
  setTimeout(function () {
    Game.buttonButtonUp()
  }, 20)
}, !1), document.getElementById("control-arrow-up").addEventListener("touchstart", function (e) {
  Game.upButtonDown()
}, !1), document.getElementById("control-arrow-up").addEventListener("touchend", function (e) {
  setTimeout(function () {
    Game.upButtonUp()
  }, 20)
}, !1), document.getElementById("control-arrow-down").addEventListener("touchstart", function (e) {
  Game.downButtonDown()
}, !1), document.getElementById("control-arrow-down").addEventListener("touchend", function (e) {
  setTimeout(function () {
    Game.downButtonUp()
  }, 20)
}, !1), document.getElementById("control-arrow-left").addEventListener("touchstart", function (e) {
  Game.leftButtonDown()
}, !1), document.getElementById("control-arrow-left").addEventListener("touchend", function (e) {
  setTimeout(function () {
    Game.leftButtonUp()
  }, 20)
}, !1), document.getElementById("control-arrow-right").addEventListener("touchstart", function (e) {
  Game.rightButtonDown()
}, !1), document.getElementById("control-arrow-right").addEventListener("touchend", function (e) {
  setTimeout(function () {
    Game.rightButtonUp()
  }, 20)
}, !1), document.getElementById("control-buttonA").addEventListener("touchstart", function (e) {
  Game.aButtonDown()
}, !1), document.getElementById("control-buttonA").addEventListener("touchend", function (e) {
  setTimeout(function () {
    Game.aButtonUp()
  }, 20)
}, !1), document.getElementById("control-buttonB").addEventListener("touchstart", function (e) {
  Game.bButtonDown()
}, !1), document.getElementById("control-buttonB").addEventListener("touchend", function (e) {
  setTimeout(function () {
    Game.bButtonUp()
  }, 20)
}, !1), $("#overlay-start .btn-reload").on("click", function (e) {
  var a = $(".rankingsFailed");
  a.hide(), gameeUI.ranksLoading.show(), gameeUI.getStats(), e.preventDefault()
}), $("#overlay-end .btn-reload").on("click", function (e) {
  var a = $(".rankingsFailed");
  a.hide(), gameeUI.ranksLoading.show(), gameeUI.saveScore(gameeUI.score), e.preventDefault()
});
window.addEventListener('popstate', function (event) {
  window.location.replace(url);
});
function goHome() {
  window.location.replace(url);
}
function hideAlert() {
  $(".alert-danger").css("display", "none");
}
