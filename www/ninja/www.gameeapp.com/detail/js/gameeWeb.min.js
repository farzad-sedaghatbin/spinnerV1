function gameeGame(e) {
  var a = e.contentWindow;
  return {
    pause: function () {
      a.postMessage(["pause"], "*")
    }, resume: function () {
      a.postMessage(["resume"], "*")
    }, restart: function () {
      a.postMessage(["restart"], "*")
    }, mute: function () {
      a.postMessage(["mute"], "*")
    }, buttonButtonDown: function () {
      a.postMessage(["button_button_down"], "*")
    }, buttonButtonUp: function () {
      a.postMessage(["button_button_up"], "*")
    }, leftButtonDown: function () {
      a.postMessage(["button_left_down"], "*")
    }, leftButtonUp: function () {
      a.postMessage(["button_left_up"], "*")
    }, rightButtonDown: function () {
      a.postMessage(["button_right_down"], "*")
    }, rightButtonUp: function () {
      a.postMessage(["button_right_up"], "*")
    }, upButtonDown: function () {
      a.postMessage(["button_up_down"], "*")
    }, upButtonUp: function () {
      a.postMessage(["button_up_up"], "*")
    }, downButtonDown: function () {
      a.postMessage(["button_down_down"], "*")
    }, downButtonUp: function () {
      a.postMessage(["button_down_up"], "*")
    }, aButtonDown: function () {
      a.postMessage(["button_a_down"], "*")
    }, aButtonUp: function () {
      a.postMessage(["button_a_up"], "*")
    }, bButtonDown: function () {
      a.postMessage(["button_b_down"], "*")
    }, bButtonUp: function () {
      a.postMessage(["button_b_up"], "*")
    }
  }
}
var GameeWeb = {
  updateScore: function (e) {
    gameeUI.updateScore(e)
  },
  requestController: function (e) {
    gameeUI.setController(e)
  },
  gameOver: function () {
    gameeUI.gameOver()
  },
  gameStart: function () {
    gameeUI.gameStart()
  },
  gamePaused: function () {
    gameeUI.gamePause()
  },
  buttonButtonDown: function () {
    gameeUI.buttonButtonDown()
  },
  buttonButtonUp: function () {
    gameeUI.buttonButtonUp()
  },
  leftButtonDown: function () {
    gameeUI.leftButtonDown()
  },
  leftButtonUp: function () {
    gameeUI.leftButtonUp()
  },
  rightButtonDown: function () {
    gameeUI.rightButtonDown()
  },
  rightButtonUp: function () {
    gameeUI.rightButtonUp()
  },
  upButtonDown: function () {
    gameeUI.upButtonDown()
  },
  upButtonUp: function () {
    gameeUI.upButtonUp()
  },
  downButtonDown: function () {
    gameeUI.downButtonDown()
  },
  downButtonUp: function () {
    gameeUI.downButtonUp()
  },
  aButtonDown: function () {
    gameeUI.aButtonDown()
  },
  aButtonUp: function () {
    gameeUI.aButtonUp()
  },
  bButtonDown: function () {
    gameeUI.bButtonDown()
  },
  bButtonUp: function () {
    gameeUI.bButtonUp()
  },
  gameRightButtonDown: function () {
    gameeUI.gameRightButtonDown()
  },
  msgToFn: {
    score: "updateScore",
    "request-controller": "requestController",
    "additional-controller": "requestController",
    "game-over": "gameOver",
    "game-start": "gameStart",
    "game-paused": "gamePaused"
  },
  onMessage: function (e) {
    if ((!e.data || !e.data.hasOwnProperty("request") && !e.data.hasOwnProperty("response")) && (e.originalEvent && (e = e.originalEvent))) {
      var a = GameeWeb.msgToFn[e.data[0]];
      if (a) {
        var t = e.data.slice(1);
        GameeWeb[a].apply(GameeWeb, t)
      }
    }
  }
};
$(window).on("message", GameeWeb.onMessage);
var gamee2Game = function (e, a) {
  function n(a) {
    e.contentWindow.postMessage(a, "*")
  }

  function i(e, a) {
    var a = {response: {messageId: e, data: a}};
    n(a)
  }

  function r(e) {
    var t = e.messageId, s = e.method, n = e.data;
    switch (s) {
      case"init":
        a.init(n, function (e) {
          i(t, e)
        });
        break;
      case"gameReady":
        a.gameReady();
        break;
      case"updateScore":
        a.updateScore(n.score, n.ghostSign);
        break;
      case"gameOver":
        a.gameOver(n.replayData);
        break;
      case"saveState":
        a.saveState(n.state, n.share);
        break;
      case"requestSocial":
        a.requestSocial(function (e) {
          i(t, e)
        })
    }
  }

  function o(e) {
    if (e.messageId && s.hasOwnProperty(e.messageId)) {
      var a = s[e.messageId];
      delete s[e.messageId], a(e.data)
    }
  }

  function l(e) {
    return "function" != typeof e ? 0 : (s[++t] = e, t)
  }

  var t = 0, s = {};
  return window.addEventListener("message", function (e) {
    var a;
    try {
      a = e.data
    } catch (t) {
      return
    }
    a.request ? r(a.request) : a.response && o(a.response)
  }), {
    start: function (e, a) {
      var t = l(a);
      n({request: {method: "start", messageId: t, data: {data: {resetState: e}}}})
    }, startReplay: function (e, a) {
      var t = l(a);
      n({request: {method: "start", messageId: t, data: {data: {replay: !0, resetState: e}}}})
    }, startGhost: function (e, a) {
      var t = l(a);
      n({request: {method: "start", messageId: t, data: {data: {ghostMode: !0, resetState: e}}}})
    }, mute: function (e) {
      var a = l(e);
      n({request: {method: "mute", messageId: a}})
    }, unmute: function (e) {
      var a = l(e);
      n({request: {method: "unmute", messageId: a}})
    }, pause: function (e) {
      var a = l(e);
      n({request: {method: "pause", messageId: a}})
    }, resume: function (e) {
      var a = l(e);
      n({request: {method: "resume", messageId: a}})
    }, ghostShow: function (e) {
      var a = l(e);
      n({request: {method: "ghostShow", messageId: a}})
    }, ghostHide: function (e) {
      var a = l(e);
      n({request: {method: "ghostHide", messageId: a}})
    }
  }
};
