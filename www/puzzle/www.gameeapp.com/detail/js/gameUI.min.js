var Game = {}, GameeBridge = {}, gameeUI = {}, timer;
window.scrollerConfigHorizontal = {scroll: "horizontal", lockOnDirection: true};
function showConsole() {
    if (typeof console != "undefined")if (typeof console.log != "undefined")console.olog = console.log; else console.olog = function () {
    };
    console.log = function (message) {
        console.olog(message);
        $("body").prepend('<p style="color: black">' + message + "</p>")
    };
    console.error = console.debug = console.info = console.log
}
Pace.on("done", function () {
    gameeUI.gameLoaded();
    resizeElements(window.innerWidth, window.innerHeight);
    $(".preloader").hide()
});
if ("addEventListener" in document) {
    document.addEventListener("DOMContentLoaded", function () {
        FastClick.attach(document.body)
    }, false)
}
document.addEventListener("touchmove", function (e) {
    e.preventDefault()
}, false);
$(window).on("load", function () {
    var gameFrame = $(".gameFrame"), gameIframeSrc = $("#gameeFrameMobile"), userAgent = navigator.userAgent.toLowerCase();
    gameIframeSrc.attr("src", gameIframeSrc.data("src"));
    Game = gameeGame(gameFrame[0]);
    Game2 = gamee2Game(gameFrame[0], gameeUI);
    gameeUI.gameLoader.show();
    gameeUI.playBtn.hide();
    if (webviewProvider === "tw") {
        $(".share-fb").remove()
    }
    if (webviewProvider === "fb") {
        $(".share-tw").remove()
    }
    $(".cRankingsBtn").on("click", function (e) {
        e.preventDefault();
        $(".popup .in").css("max-height", window.innerHeight - 130 + "px");
        $("#gameeMobile #overlay-standing").addClass("visible");
        gameeUI.getFullRankings()
    });
    $(".cRankingsBtn_close").on("click", function (e) {
        e.preventDefault();
        disableScroll();
        $("#gameeMobile #overlay-standing").removeClass("visible")
    });
    window.addEventListener("resize", function () {
        resizeElements(document.body.offsetWidth, document.body.offsetHeight)
    })
});
window.addEventListener("orientationchange", function () {
    setTimeout(function () {
        resizeElements(document.body.offsetWidth, document.body.offsetHeight)
    }, 500)
}, false);
var mql = window.matchMedia("(orientation: portrait)");
if (!mql.matches) {
    $("#alert").removeClass("hide").addClass("visible")
}
mql.addListener(function (m) {
    if (m.matches) {
        enableScroll();
        $("#alert").removeClass("visible").addClass("hide");
        if (gameeUI.currentState === "paused") {
            gameeUI.gameResume()
        }
    } else {
        disableScroll();
        $("#alert").removeClass("hide").addClass("visible");
        if (gameeUI.currentState === "playing") {
            gameeUI.gamePause()
        }
    }
});
GameeBridge = {
    resume: function () {
        isGamee2() ? Game2.resume() : Game.resume()
    }, start: function () {
        isGamee2() ? Game2.start(false) : ""
    }, pause: function () {
        isGamee2() ? Game2.pause() : Game.pause()
    }, restart: function () {
        isGamee2() ? Game2.start(false) : Game.restart()
    }
};
gameeUI = {
    currentState: "init",
    user: null,
    anonymous_id: null,
    firstPlay: true,
    gameHighscore: 0,
    highscoreBeat: false,
    playTime: 0,
    score: 0,
    myRank: null,
    myPhoto: null,
    gameeVer: 1,
    allRankings: {},
    gameLoaded: function () {
        var htmlEl = $("html"), gameFrame = $(".gameFrame");
        htmlEl.addClass("loaded");
        gameeUI.startOverlay.show();
        gameFrame.focus();
        if (typeof kik != "undefined") {
            if (kik.enabled) {
                kik.getUser(function (user) {
                    if (!user) {
                        gameeUI.user = null;
                        kik.getAnonymousUser(function (token) {
                            gameeUI.anonymous_id = token
                        })
                    } else {
                        gameeUI.user = user.username;
                        gameeUI.getStats()
                    }
                })
            }
        }
        if (isTelegram() || isFacebook()) {
            gameeUI.getStats()
        }
    },
    init: function (data, cb) {
        console.log("GameeJS - 2: init");
        this.gameeVer = 2;
        cb(data)
    },
    gameReady: function () {
        console.log("GameeJS 2: ready");
        gameeUI.gameLoader.hide();
        gameeUI.playBtn.show()
    },
    requestSocial: function () {
        console.log("GameeJS 2: Socials requested")
    },
    saveState: function () {
        console.log("GameeJS 2: save state")
    },
    gameStart: function () {
        console.log("Game Start");
        gameeUI.currentState = "playing";
        gameeUI.timer.start();
        gameeUI.updateScore(0);
        if (isGamee2()) {
            GameeBridge.start(false)
        }
    },
    gameBegin: function () {
        gameeUI.startOverlay.hide();
        gameeUI.playBtn.hide();
        gameeUI.controls.show();
        if (isGamee2()) {
            gameeUI.gameStart()
        }
    },
    gameOver: function () {
        var totalScore = parseInt($(".totalScore").html()), highScore = parseInt($(".highscore").html());
        var db = openDatabase('mydb', '1.0', 'OMIDDB', 1024 * 1024);
        db.transaction(function (tx) {
            tx.executeSql('SELECT d.val FROM MYGAME d WHERE d.name="score"', [], function (tx, results) {
                var len = results.rows.length, i, result = '';
                if (results.rows && results.rows.length != 0) {
                    var a = results.rows.item(0).val.split(",");
                    if (a[0] == "false") {
                        a[3] = totalScore;
                        tx.executeSql('UPDATE MYGAME SET val=? WHERE name= "score"', [a.join(",")], function (tx, results) {
                            tx.executeSql('DELETE FROM MYGAME WHERE name="wasInGame"', [], function (tx, results) {
                                tx.executeSql('INSERT INTO MYGAME (name, val) VALUES (?, ?)', ["wasInGame", true],function (tx, results) {
                                  gameeUI.overlay.show();
                                  gameeUI.controls.hide();
                                  gameeUI.restartBtn.show();
                                  gameeUI.saveScore(gameeUI.score);
                                  gameeUI.updateHighscore(gameeUI.score);
                                  gameeUI.sendMixpanel(window.gameeUI.score);
                                  gameeUI.timer.stop()
                                  $("#control-restart").removeClass("visible");
                                });
                            });
                        });
                    } else {
                        gameeUI.submitRecord.send(a[1],totalScore,a[2]);
                      gameeUI.overlay.show();
                      gameeUI.controls.hide();
                      gameeUI.restartBtn.show();
                      gameeUI.saveScore(gameeUI.score);
                      gameeUI.updateHighscore(gameeUI.score);
                      gameeUI.sendMixpanel(window.gameeUI.score);
                      gameeUI.timer.stop()
                    }
                }
            });
        });
        $("#overlay-end .rankings, #overlay-end .ranks-wrap").removeClass("visible");
        $(".share-tw").attr("href", gameeUI.game_tw_link(totalScore));
        gameeUI.currentState = "gameOver";
        gameeUI.highscoreBeat = false;
        gameeUI.setScoreCustomText("Good job");
        if ($(".relatedGames").length) {
            window.scroller4 = new Scroller("#overlay-end .relatedGames .scrollArea", scrollerConfigHorizontal)
        }
    },
    gameRestart: function () {
        GameeBridge.restart();
        gameeUI.overlay.hide();
        gameeUI.controls.show();
        gameeUI.restartBtn.hide();
        $(".this-share").removeClass("visible");
        $(".overlay .this-share a").css("opacity", "0");
        $("#overlay-end .rankings .item").css("opacity", "0");
        $(".ranks-wrap").removeClass("visible")
    },
    gamePause: function () {
        gameeUI.currentState = "paused";
        GameeBridge.pause();
        gameeUI.overlayPause.show();
        gameeUI.controls.hide();
        gameeUI.resumeBtn.show();
        $(".your_score").addClass("paused");
        gameeUI.timer.pause()
    },
    gameResume: function () {
        gameeUI.currentState = "playing";
        gameeUI.overlayPause.hide();
        gameeUI.timer.resume();
        gameeUI.resumeBtn.hide();
        gameeUI.controls.show();
        $(".your_score").removeClass("paused");
        GameeBridge.resume()
    },
    setController: function (i) {
        gameeUI.gameLoader.hide();
        gameeUI.playBtn.show()
    },
    checkFbStatus: function (data) {
        gameeUI.myPhoto = data.photo
    },
    game_tw_link: function (i) {
    },
    updateScore: function (i) {
        var totalScore = $(".totalScore");
        gameeUI.score = i;
        totalScore.html(parseInt(i));
        gameeUI.checkRankStatus(i)
    },
    updateOverall: function (i) {
        gameGlobals.overallScore = i
    },
    updateHighscore: function (i) {
        if (gameeUI.score > gameeUI.gameHighscore) {
            gameeUI.gameHighscore = i;
            gameeUI.firstPlay = false;
            gameeUI.setScoreMessage("New highscore")
        } else {
            gameeUI.setScoreMessage("You scored")
        }
    },
    checkRankStatus: function (currentScore) {
    },
    setScoreMessage: function (string) {
        $(".you_scored_text", ".your_score").html(string)
    },
    setScoreCustomText: function (string) {
        $(".custom_text", ".your_score").html(string)
    },
    overlay: {
        show: function () {
            $("#canvasWrap").addClass("overlayVisible");
            $("#overlay-end").addClass("visible");
            $("#controls").addClass("visible")
        }, hide: function () {
            $("#canvasWrap").removeClass("overlayVisible");
            $("#overlay-end").removeClass("visible");
            $("#controls").removeClass("visible")
        }
    },
    overlayPause: {
        show: function () {
            $("#canvasWrap").addClass("overlayVisible");
            $("#overlay-pause").addClass("visible");
            $("#controls").addClass("visible")
        }, hide: function () {
            $("#canvasWrap").removeClass("overlayVisible");
            $("#overlay-pause").removeClass("visible");
            $("#controls").removeClass("visible")
        }
    },
    submitRecord: {
        send: function (id,score,token) {
            var request = $.ajax({
                url: "https://dagala.cfapps.io/api/1/submitRecord",
                type: "POST",
              contentType: "application/json",
                headers: {"Authorization": token},
                data: JSON.stringify({gameId:id ,score:score})
            });
            request.done(function (msg) {
                var db = openDatabase('mydb', '1.0', 'OMIDDB', 1024 * 1024);
                db.transaction(function (tx) {
                    tx.executeSql('DELETE FROM MYGAME WHERE name="wasInGame"', [], function (tx, results) {
                        tx.executeSql('INSERT INTO MYGAME (name, val) VALUES (?, ?)', ["wasInGame", true]);
                    });
                });
            });
            request.fail(function (jqXHR, textStatus) {
                $(".alert").css("display","block");
              setTimeout(function(){ $(".alert").css("display","none"); }, 3000);
            });
        }
    },
    startOverlay: {
        show: function () {
            $("#canvasWrap").addClass("overlayVisible");
            $("#overlay-start").addClass("visible");
            $("#controls").addClass("visible")
        }, hide: function () {
            $("#canvasWrap").removeClass("overlayVisible");
            $("#overlay-start").removeClass("visible");
            $("#controls").removeClass("visible");
            $("#overlay-start .ranks-wrap").removeClass("visible")
        }
    },
    controls: {
        show: function () {
            $("#controller").addClass("visible")
        }, hide: function () {
            $("#controller").removeClass("visible")
        }
    },
    dataLoader: {
        show: function () {
        }, hide: function () {
        }
    },
    ranksLoading: {
        show: function () {
            $(".spinner", ".rankings").show()
        }, hide: function () {
            $(".spinner", ".rankings").hide()
        }
    },
    gameLoader: {
        show: function () {
            $(".gameLoading").remove();
            $("#controls .cWrap").append('<div class="gameLoading"><div class="icn"></div></div>');
            $("#overlay-start .transform").append('<div class="gameLoading fs-loading"><div class="icn"></div></div>')
        }, hide: function () {
            $(".gameLoading").remove();
            $("#overlay-start .rankings").addClass("loaded").removeClass("loading")
        }
    },
    restartBtn: {
        show: function () {
            $(".cLayout.restart, .control-fs-restart").addClass("visible")
        }, hide: function () {
            $(".cLayout.restart, .control-fs-restart").removeClass("visible")
        }
    },
    playBtn: {
        show: function () {
            $(".cLayout.play, .control-fs-play").addClass("visible")
        }, hide: function () {
            $(".cLayout.play, .control-fs-play").removeClass("visible")
        }
    },
    resumeBtn: {
        show: function () {
            $(".cLayout.resume, .control-fs-resume").addClass("visible")
        }, hide: function () {
            $(".cLayout.resume, .control-fs-resume").removeClass("visible")
        }
    },
    fullRankings: {
        show: function () {
            $("#overlay-standing .in").css("max-height", window.innerHeight - 72 + "px");
            $("#overlay-standing").addClass("visible");
            $("#overlay-standing").removeClass("hide")
        }, hide: function () {
            $("#overlay-standing").removeClass("visible");
            $("#overlay-standing").addClass("hide");
            $("#overlay-standing .items").html("")
        }
    },
    timer: {
        start: function () {
            timer = setInterval(function () {
                ++gameeUI.playTime
            }, 1e3)
        }, pause: function () {
            clearTimeout(timer)
        }, resume: function () {
            timer = setInterval(function () {
                ++gameeUI.playTime
            }, 1e3)
        }, stop: function () {
            clearTimeout(timer);
            gameeUI.playTime = 0
        }
    },
    sendMixpanel: function (totalScore) {
    },
    sendMixpanelShare: function (share_type, share_screen, share_version) {
    },
    setGameOverRankings: function (data) {
    },
    setStartRankings: function (data) {
    },
    saveScore: function (score) {
    },
    sendScoreData: function (sData) {
    },
    setFullRankings: function (data) {
    },
    saveRankingsToObject: function (data) {
    },
    getFullRankings: function () {
    },
    getStats: function () {
    },
    getSurroundingRankings: function (sData) {
    },
    kikPickFriends: function () {
    }
};
function transformOverlay(div, proportional) {
    var currentWidth = div.innerWidth(), currentHeight = div.innerHeight(), availableHeight = $("#canvasWrap").height(), availableWidth = $("#gameeFrameMobile").width(), scaleX = availableWidth / 6.8 / 100, scaleY = availableHeight / 5.36 / 100;
    if (proportional) {
        scaleX = Math.min(scaleX, scaleY);
        scaleY = scaleX
    }
    var translationX = Math.round((availableWidth - currentWidth) / 2);
    var translationY = Math.round((availableHeight - currentHeight) / 2 - 50);
    div.css({
        "-webkit-transform": "translate(" + translationX + "px, " + translationY + "px) scale3d(" + scaleX + ", " + scaleY + ", 1)",
        transform: " translate(" + translationX + "px, " + translationY + "px) scale3d(" + scaleX + ", " + scaleY + ", 1)"
    })
}
function transformControls(div, proportional) {
    var controller = $("#controller"), currentWidth = div.innerWidth(), currentHeight = div.innerHeight(), scaleX = (currentWidth - 190) / 2.7 / 100, scaleY = currentHeight / 2.7 / 100;
    if (proportional) {
        scaleX = Math.min(scaleX, scaleY);
        scaleY = scaleX
    }
    controller.css({
        "-webkit-transform": "scale3d(" + scaleX + ", " + scaleY + ", 1)",
        transform: "scale3d(" + scaleX + ", " + scaleY + ", 1)"
    })
}
function transformControls2(div, proportional) {
    var restart = $("#restart"), play = $("#play"), resume = $("#control-resume"), gameLoading = $(".gameLoading"), currentWidth = div.innerWidth(), currentHeight = div.innerHeight(), scaleX = currentWidth / 2 / 100, scaleY = currentHeight / 2 / 100;
    if (proportional) {
        scaleX = Math.min(scaleX, scaleY);
        scaleY = scaleX
    }
    if (scaleX >= .9) {
        scaleX = .9;
        scaleY = .9
    }
    restart.css({
        "-webkit-transform": "scale3d(" + scaleX + ", " + scaleY + ", 1)",
        transform: "scale3d(" + scaleX + ", " + scaleY + ", 1)"
    });
    play.css({
        "-webkit-transform": "scale3d(" + scaleX + ", " + scaleY + ", 1)",
        transform: "scale3d(" + scaleX + ", " + scaleY + ", 1)"
    });
    resume.css({
        "-webkit-transform": "scale3d(" + scaleX + ", " + scaleY + ", 1)",
        transform: "scale3d(" + scaleX + ", " + scaleY + ", 1)"
    });
    gameLoading.css({
        "-webkit-transform": "scale3d(" + scaleX + ", " + scaleY + ", 1)",
        transform: "scale3d(" + scaleX + ", " + scaleY + ", 1)"
    })
}
function resizeElements(intWidth, intHeight) {
    var iframe = document.getElementById("gameeFrameMobile"), canvasWrap = document.getElementById("canvasWrap"), controls = document.getElementById("controls"), overlayInner = $(".overlay .inner");
    overlayInner.css("max-width", intWidth + "px");
    iframe.width = intWidth;
    iframe.height = intWidth;
    iframe.style.width = intWidth + "px";
    iframe.style.height = intWidth + "px";
    canvasWrap.style.height = intWidth + "px";
    canvasWrap.style.width = intWidth + "px";
    controls.style.height = intHeight - intWidth + "px";
    transformOverlay($("#overlay-start .transform"), true);
    transformOverlay($("#overlay-end .transform"), true);
    transformOverlay($("#overlay-pause .transform"), true);
    transformControls($("#controls"), true);
    transformControls2($("#controls"), true)
}
var keys = {37: 1, 38: 1, 39: 1, 40: 1};
function preventDefault(e) {
    e = e || window.event;
    if (e.preventDefault)e.preventDefault();
    e.returnValue = false
}
function preventDefaultForScrollKeys(e) {
    if (keys[e.keyCode]) {
        preventDefault(e);
        return false
    }
}
function disableScroll() {
    document.addEventListener("touchmove", function (e) {
        e.preventDefault()
    }, false)
}
function enableScroll() {
    if (window.removeEventListener)window.removeEventListener("DOMMouseScroll", preventDefault, false);
    window.onmousewheel = document.onmousewheel = null;
    window.onwheel = null;
    window.ontouchmove = null;
    document.onkeydown = null;
    document.ontouchmove = null
}
var webviewProvider = function () {
    if (/\/FBIOS/i.test(navigator.userAgent) === true) {
        return "fb"
    }
    if (/Twitter for/i.test(navigator.userAgent) === true) {
        return "tw"
    }
    if (/\/\/t.co\//i.test(document.referrer) === true) {
        return "tw"
    }
    return null
}();
$(".pauseGame").on("click", function () {
    gameeUI.gamePause()
});
$("#control-restart, .control-fs-restart").on("click", function (e) {
    gameeUI.gameRestart()
});
$("#control-play, .control-fs-play").on("click", function (e) {
    gameeUI.gameBegin()
});
$("#control-resume, .control-fs-resume").on("click", function (e) {
    gameeUI.gameResume()
});
document.getElementById("control-oneButton").addEventListener("touchstart", function (e) {
    Game.buttonButtonDown()
}, false);
document.getElementById("control-oneButton").addEventListener("touchend", function (e) {
    setTimeout(function () {
        Game.buttonButtonUp()
    }, 20)
}, false);
document.getElementById("control-arrow-up").addEventListener("touchstart", function (e) {
    Game.upButtonDown()
}, false);
document.getElementById("control-arrow-up").addEventListener("touchend", function (e) {
    setTimeout(function () {
        Game.upButtonUp()
    }, 20)
}, false);
document.getElementById("control-arrow-down").addEventListener("touchstart", function (e) {
    Game.downButtonDown()
}, false);
document.getElementById("control-arrow-down").addEventListener("touchend", function (e) {
    setTimeout(function () {
        Game.downButtonUp()
    }, 20)
}, false);
document.getElementById("control-arrow-left").addEventListener("touchstart", function (e) {
    Game.leftButtonDown()
}, false);
document.getElementById("control-arrow-left").addEventListener("touchend", function (e) {
    setTimeout(function () {
        Game.leftButtonUp()
    }, 20)
}, false);
document.getElementById("control-arrow-right").addEventListener("touchstart", function (e) {
    Game.rightButtonDown()
}, false);
document.getElementById("control-arrow-right").addEventListener("touchend", function (e) {
    setTimeout(function () {
        Game.rightButtonUp()
    }, 20)
}, false);
document.getElementById("control-buttonA").addEventListener("touchstart", function (e) {
    Game.aButtonDown()
}, false);
document.getElementById("control-buttonA").addEventListener("touchend", function (e) {
    setTimeout(function () {
        Game.aButtonUp()
    }, 20)
}, false);
document.getElementById("control-buttonB").addEventListener("touchstart", function (e) {
    Game.bButtonDown()
}, false);
document.getElementById("control-buttonB").addEventListener("touchend", function (e) {
    setTimeout(function () {
        Game.bButtonUp()
    }, 20)
}, false);
$("#overlay-start .btn-reload").on("click", function (e) {
    var ranksFailedEl = $(".rankingsFailed");
    ranksFailedEl.hide();
    gameeUI.ranksLoading.show();
    gameeUI.getStats();
    e.preventDefault()
});
$("#overlay-end .btn-reload").on("click", function (e) {
    var ranksFailedEl = $(".rankingsFailed");
    ranksFailedEl.hide();
    gameeUI.ranksLoading.show();
    gameeUI.saveScore(gameeUI.score);
    e.preventDefault()
});
